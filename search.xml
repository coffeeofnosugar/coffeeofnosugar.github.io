<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023年08月 运动</title>
    <url>/2023/11/22/2023%E5%B9%B408%E6%9C%88-exercise/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/base.css">
<link rel="stylesheet" href="/../css/center.css">
<link rel="stylesheet" href="/../css/images.css">

<hr>
<h3 id="2023年8月4日之前的运动"><a href="#2023年8月4日之前的运动" class="headerlink" title="2023年8月4日之前的运动"></a>2023年8月4日之前的运动</h3><center>最早是从7月14日开始每天跑步</center>
<center class="light">除了19、20、21连续下了三天雨外</center>

<p>从7月14日开始跑步其中发生的一些事件：</p>
<ul>
<li>17号晚上八点半下班，完美错过公交车，虽然并不是最后一班车，但脑海中萌生了跑回去的想法，一不做二不休直接干了。前一公里路比较窄，再加上视野、光线比较差，所以前1.2公里我是骑行，后面的2.5公里是跑步完成</li>
</ul>
<p><img class="half" src="/../images/exercise/2023-07-17.jpg"></img></p>
<ul>
<li><p>19、20、21号连续三天晚上下的雨都挺大的，这三天没跑。还记得20号的晚上时不时看看窗外雨停没停</p>
</li>
<li><p>22号的前天晚上报名参加了一个Keep和原神联动的线上活动——运动5.2公里。这天是周六，休息了一天，明天还不用上班，而且前三天还没跑，简直天时地利人和，二话不说直接开干</p>
</li>
</ul>
<div class="container">
    <img src="/../images/exercise/2023-07-22_view.jpg"></img>
    <img src="/../images/exercise/2023-07-22.jpg"></img>
</div>


<hr>
<h3 id="2023年8月4日-运动"><a href="#2023年8月4日-运动" class="headerlink" title="2023年8月4日 运动"></a>2023年8月4日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-04.jpg"></img></p>
<hr>
<h3 id="2023年8月6日-运动"><a href="#2023年8月6日-运动" class="headerlink" title="2023年8月6日 运动"></a>2023年8月6日 运动</h3><center class="moderate">5号回了趟老家，跑步鸽了一天，所以今天多跑一圈</center>
<img class="half" src="/../images/exercise/2023-08-06.jpg"></img>


<hr>
<h3 id="2023年8月7日-运动"><a href="#2023年8月7日-运动" class="headerlink" title="2023年8月7日 运动"></a>2023年8月7日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-07.jpg"></img></p>
<hr>
<h3 id="2023年8月8日-运动"><a href="#2023年8月8日-运动" class="headerlink" title="2023年8月8日 运动"></a>2023年8月8日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-08.jpg"></img></p>
<hr>
<h3 id="2023年8月9日-运动"><a href="#2023年8月9日-运动" class="headerlink" title="2023年8月9日 运动"></a>2023年8月9日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-09.jpg"></img></p>
<hr>
<h3 id="2023年8月10日-运动"><a href="#2023年8月10日-运动" class="headerlink" title="2023年8月10日 运动"></a>2023年8月10日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-10.jpg"></img></p>
<hr>
<h3 id="2023年8月11日-运动"><a href="#2023年8月11日-运动" class="headerlink" title="2023年8月11日 运动"></a>2023年8月11日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-11.jpg"></img></p>
<hr>
<h3 id="2023年8月18日-运动"><a href="#2023年8月18日-运动" class="headerlink" title="2023年8月18日 运动"></a>2023年8月18日 运动</h3><p>从上周五（11号）晚上开始二阳，到今天已经整整一周没有跑步了。</p>
<p>在这期间发觉自己的跑步习惯很不好，总是跑500m走200m，锻炼效果大打折扣。所以今天直接一口气跑完一圈</p>
<p>可惜的是今天的keep服务器有问题，一直访问不到服务器</p>
<hr>
<h3 id="2023年8月19日-运动"><a href="#2023年8月19日-运动" class="headerlink" title="2023年8月19日 运动"></a>2023年8月19日 运动</h3><p>今天也是一口气跑完一整圈</p>
<p>依旧没连上keep的服务器，重新下载了keep也还是连接不上。跑完后回到家发现居然可以连上了，太奇怪了</p>
<hr>
<h3 id="2023年8月20日-运动"><a href="#2023年8月20日-运动" class="headerlink" title="2023年8月20日 运动"></a>2023年8月20日 运动</h3><p>奇怪的很，每次要跑步的时候keep的服务器就连接不上去，跑完之后就能连上去了</p>
<p>可能是这个时间段跑步的人太多了，服务器响应不过来吧</p>
<p>机智的我今天是离线跑的，等重新连接上服务器之后再上传</p>
<p><img class="half" src="/../images/exercise/2023-08-20.jpg"></img></p>
<hr>
<h3 id="2023年8月21日-运动"><a href="#2023年8月21日-运动" class="headerlink" title="2023年8月21日 运动"></a>2023年8月21日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-21.jpg"></img></p>
<hr>
<h3 id="2023年8月22日-运动"><a href="#2023年8月22日-运动" class="headerlink" title="2023年8月22日 运动"></a>2023年8月22日 运动</h3><p>被自己蠢到，看了眼前两天的跑步记录，发现keep的账号登入成现在的手机号了（当前绑定的手机号是初中的时候用的一个手机号）</p>
<p>强迫症的我直接就注销+重新绑定一套流程走下来，好在中间没出什么岔子，很顺利的就绑定了好了</p>
<p>但是今天晚上的跑步记录没了，被自己蠢哭晕</p>
<hr>
<h3 id="2023年8月23日-运动"><a href="#2023年8月23日-运动" class="headerlink" title="2023年8月23日 运动"></a>2023年8月23日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-23.jpg"></img></p>
<hr>
<h3 id="2023年8月25日-运动"><a href="#2023年8月25日-运动" class="headerlink" title="2023年8月25日 运动"></a>2023年8月25日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-25.jpg"></img></p>
<hr>
<h3 id="2023年8月26日-运动"><a href="#2023年8月26日-运动" class="headerlink" title="2023年8月26日 运动"></a>2023年8月26日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-26.jpg"></img></p>
<hr>
<h3 id="2023年8月27日-运动"><a href="#2023年8月27日-运动" class="headerlink" title="2023年8月27日 运动"></a>2023年8月27日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-27.jpg"></img></p>
<hr>
<h3 id="2023年8月28日-运动"><a href="#2023年8月28日-运动" class="headerlink" title="2023年8月28日 运动"></a>2023年8月28日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-28.jpg"></img></p>
<hr>
<h3 id="2023年8月29日-运动"><a href="#2023年8月29日-运动" class="headerlink" title="2023年8月29日 运动"></a>2023年8月29日 运动</h3><p><img class="half" src="/../images/exercise/2023-08-29.jpg"></img></p>
<hr>
<h3 id="2023年8月30日-运动"><a href="#2023年8月30日-运动" class="headerlink" title="2023年8月30日 运动"></a>2023年8月30日 运动</h3><center>今天打算报名马拉松，开始加强训练</center>

<p><img class="half" src="/../images/exercise/2023-08-30.jpg"></img></p>
<hr>
<h3 id="2023年8月31日-运动"><a href="#2023年8月31日-运动" class="headerlink" title="2023年8月31日 运动"></a>2023年8月31日 运动</h3><center>跑步跑太勤了，感觉我的这个老骨头快绷不住了。赶紧买了一瓶纯牛奶，结果发现错买成酸奶了</center>

<center>不过正好，我本来就不喜欢纯牛奶，并且喜欢酸奶，直接开干</center>


<p><img class="half" src="/../images/exercise/2023-08-31.jpg"></img></p>
]]></content>
      <tags>
        <tag>-运动 -日常</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年09月 运动</title>
    <url>/2023/11/22/2023%E5%B9%B409%E6%9C%88-exercise/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/base.css">
<link rel="stylesheet" href="/../css/center.css">
<link rel="stylesheet" href="/../css/images.css">

<hr>
<h3 id="2023年9月02日-运动"><a href="#2023年9月02日-运动" class="headerlink" title="2023年9月02日 运动"></a>2023年9月02日 运动</h3><center>昨晚加班加猛了，一直加到转钟，没有跑步</center>



<p><img class="half" src="/../images/exercise/2023-09-02.jpg"></img></p>
<hr>
<h3 id="2023年9月10日-运动"><a href="#2023年9月10日-运动" class="headerlink" title="2023年9月10日 运动"></a>2023年9月10日 运动</h3><center>出差了一周，一周没跑了</center>

<center>今天暂时只跑个一圈半热身一下吧</center>


<p><img class="half" src="/../images/exercise/2023-09-10.jpg"></img></p>
<hr>
<h3 id="2023年9月11日-运动"><a href="#2023年9月11日-运动" class="headerlink" title="2023年9月11日 运动"></a>2023年9月11日 运动</h3><p><img class="half" src="/../images/exercise/2023-09-11.jpg"></img></p>
<hr>
<h3 id="2023年9月14日-运动"><a href="#2023年9月14日-运动" class="headerlink" title="2023年9月14日 运动"></a>2023年9月14日 运动</h3><p><img class="half" src="/../images/exercise/2023-09-14.jpg"></img></p>
<hr>
<h3 id="2023年9月17日-运动"><a href="#2023年9月17日-运动" class="headerlink" title="2023年9月17日 运动"></a>2023年9月17日 运动</h3><p><img class="half" src="/../images/exercise/2023-09-17.jpg"></img></p>
]]></content>
      <tags>
        <tag>-运动 -日常</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年10月 运动</title>
    <url>/2023/11/22/2023%E5%B9%B410%E6%9C%88-exercise/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/base.css">
<link rel="stylesheet" href="/../css/center.css">
<link rel="stylesheet" href="/../css/images.css">

<hr>
<h3 id="2023年10月30日-运动"><a href="#2023年10月30日-运动" class="headerlink" title="2023年10月30日 运动"></a>2023年10月30日 运动</h3><p><img class="half" src="/../images/exercise/2023-10-30.jpg"></img></p>
]]></content>
      <tags>
        <tag>-运动 -日常</tag>
      </tags>
  </entry>
  <entry>
    <title>日常运动</title>
    <url>/2023/09/12/exercise/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/base.css">
<link rel="stylesheet" href="/../css/center.css">
<link rel="stylesheet" href="/../css/images.css">


<span id="more"></span>


<hr>
<h3 id="2023年08月"><a href="#2023年08月" class="headerlink" title="2023年08月"></a>2023年08月</h3><hr>
<h4 id="2023年8月4日之前的运动"><a href="#2023年8月4日之前的运动" class="headerlink" title="2023年8月4日之前的运动"></a>2023年8月4日之前的运动</h4><center>最早是从7月14日开始每天跑步</center>
<center class="light">除了19、20、21连续下了三天雨外</center>
<!-- more -->

<p>从7月14日开始跑步其中发生的一些事件：</p>
<ul>
<li>17号晚上八点半下班，完美错过公交车，虽然并不是最后一班车，但脑海中萌生了跑回去的想法，一不做二不休直接干了。前一公里路比较窄，再加上视野、光线比较差，所以前1.2公里我是骑行，后面的2.5公里是跑步完成</li>
</ul>
<p><img class="half" src="/../images/exercise/2023-07-17.jpg"></img></p>
<ul>
<li><p>19、20、21号连续三天晚上下的雨都挺大的，这三天没跑。还记得20号的晚上时不时看看窗外雨停没停</p>
</li>
<li><p>22号的前天晚上报名参加了一个Keep和原神联动的线上活动——运动5.2公里。这天是周六，休息了一天，明天还不用上班，而且前三天还没跑，简直天时地利人和，二话不说直接开干</p>
</li>
</ul>
<div class="container">
    <img src="/../images/exercise/2023-07-22_view.jpg"></img>
    <img src="/../images/exercise/2023-07-22.jpg"></img>
</div>


<hr>
<h4 id="2023年8月4日"><a href="#2023年8月4日" class="headerlink" title="2023年8月4日"></a>2023年8月4日</h4><!-- more -->
<p><img class="half" src="/../images/exercise/2023-08-04.jpg"></img></p>
<hr>
<h4 id="2023年8月6日"><a href="#2023年8月6日" class="headerlink" title="2023年8月6日"></a>2023年8月6日</h4><center class="moderate">5号回了趟老家，跑步鸽了一天，所以今天多跑一圈</center>
<!-- more -->
<img class="half" src="/../images/exercise/2023-08-06.jpg"></img>


<hr>
<h4 id="2023年8月7日"><a href="#2023年8月7日" class="headerlink" title="2023年8月7日"></a>2023年8月7日</h4><!-- more -->
<p><img class="half" src="/../images/exercise/2023-08-07.jpg"></img></p>
<hr>
<h4 id="2023年8月8日"><a href="#2023年8月8日" class="headerlink" title="2023年8月8日"></a>2023年8月8日</h4><!-- more -->
<p><img class="half" src="/../images/exercise/2023-08-08.jpg"></img></p>
<hr>
<h4 id="2023年8月9日"><a href="#2023年8月9日" class="headerlink" title="2023年8月9日"></a>2023年8月9日</h4><!-- more -->
<p><img class="half" src="/../images/exercise/2023-08-09.jpg"></img></p>
<hr>
<h4 id="2023年8月10日"><a href="#2023年8月10日" class="headerlink" title="2023年8月10日"></a>2023年8月10日</h4><!-- more -->
<p><img class="half" src="/../images/exercise/2023-08-10.jpg"></img></p>
<hr>
<h4 id="2023年8月11日"><a href="#2023年8月11日" class="headerlink" title="2023年8月11日"></a>2023年8月11日</h4><!-- more -->
<p><img class="half" src="/../images/exercise/2023-08-11.jpg"></img></p>
<hr>
<h4 id="2023年8月18日"><a href="#2023年8月18日" class="headerlink" title="2023年8月18日"></a>2023年8月18日</h4><p>从上周五（11号）晚上开始二阳，到今天已经整整一周没有跑步了。</p>
<p>在这期间发觉自己的跑步习惯很不好，总是跑500m走200m，锻炼效果大打折扣。所以今天直接一口气跑完一圈</p>
<p>可惜的是今天的keep服务器有问题，一直访问不到服务器</p>
<hr>
<h4 id="2023年8月19日"><a href="#2023年8月19日" class="headerlink" title="2023年8月19日"></a>2023年8月19日</h4><p>今天也是一口气跑完一整圈</p>
<p>依旧没连上keep的服务器，重新下载了keep也还是连接不上。跑完后回到家发现居然可以连上了，太奇怪了</p>
<hr>
<h4 id="2023年8月20日"><a href="#2023年8月20日" class="headerlink" title="2023年8月20日"></a>2023年8月20日</h4><p>奇怪的很，每次要跑步的时候keep的服务器就连接不上去，跑完之后就能连上去了</p>
<p>可能是这个时间段跑步的人太多了，服务器响应不过来吧</p>
<p>机智的我今天是离线跑的，等重新连接上服务器之后再上传</p>
<!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-20.jpg"></img></p>
<hr>
<h4 id="2023年8月21日"><a href="#2023年8月21日" class="headerlink" title="2023年8月21日"></a>2023年8月21日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-21.jpg"></img></p>
<hr>
<h4 id="2023年8月22日"><a href="#2023年8月22日" class="headerlink" title="2023年8月22日"></a>2023年8月22日</h4><p>被自己蠢到，看了眼前两天的跑步记录，发现keep的账号登入成现在的手机号了（当前绑定的手机号是初中的时候用的一个手机号）</p>
<p>强迫症的我直接就注销+重新绑定一套流程走下来，好在中间没出什么岔子，很顺利的就绑定了好了</p>
<p>但是今天晚上的跑步记录没了，被自己蠢哭晕</p>
<hr>
<h4 id="2023年8月23日"><a href="#2023年8月23日" class="headerlink" title="2023年8月23日"></a>2023年8月23日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-23.jpg"></img></p>
<hr>
<h4 id="2023年8月25日"><a href="#2023年8月25日" class="headerlink" title="2023年8月25日"></a>2023年8月25日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-25.jpg"></img></p>
<hr>
<h4 id="2023年8月26日"><a href="#2023年8月26日" class="headerlink" title="2023年8月26日"></a>2023年8月26日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-26.jpg"></img></p>
<hr>
<h4 id="2023年8月27日"><a href="#2023年8月27日" class="headerlink" title="2023年8月27日"></a>2023年8月27日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-27.jpg"></img></p>
<hr>
<h4 id="2023年8月28日"><a href="#2023年8月28日" class="headerlink" title="2023年8月28日"></a>2023年8月28日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-28.jpg"></img></p>
<hr>
<h4 id="2023年8月29日"><a href="#2023年8月29日" class="headerlink" title="2023年8月29日"></a>2023年8月29日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-29.jpg"></img></p>
<hr>
<h4 id="2023年8月30日"><a href="#2023年8月30日" class="headerlink" title="2023年8月30日"></a>2023年8月30日</h4><center>今天打算报名马拉松，开始加强训练</center>

<p><img class="half" src="/../images/exercise/2023-08-30.jpg"></img></p>
<hr>
<h4 id="2023年8月31日"><a href="#2023年8月31日" class="headerlink" title="2023年8月31日"></a>2023年8月31日</h4><center>跑步跑太勤了，感觉我的这个老骨头快绷不住了。赶紧买了一瓶纯牛奶，结果发现错买成酸奶了</center>

<center>不过正好，我本来就不喜欢纯牛奶，并且喜欢酸奶，直接开干</center>

<!-- more -->

<p><img class="half" src="/../images/exercise/2023-08-31.jpg"></img></p>
<hr>
<h3 id="2023年09月"><a href="#2023年09月" class="headerlink" title="2023年09月"></a>2023年09月</h3><hr>
<h4 id="2023年9月02日"><a href="#2023年9月02日" class="headerlink" title="2023年9月02日"></a>2023年9月02日</h4><center>昨晚加班加猛了，一直加到转钟，没有跑步</center>


<!-- more -->

<p><img class="half" src="/../images/exercise/2023-09-02.jpg"></img></p>
<hr>
<h4 id="2023年9月10日"><a href="#2023年9月10日" class="headerlink" title="2023年9月10日"></a>2023年9月10日</h4><center>出差了一周，一周没跑了</center>

<center>今天暂时只跑个一圈半热身一下吧</center>

<!-- more -->

<p><img class="half" src="/../images/exercise/2023-09-10.jpg"></img></p>
<hr>
<h4 id="2023年9月11日"><a href="#2023年9月11日" class="headerlink" title="2023年9月11日"></a>2023年9月11日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-09-11.jpg"></img></p>
<hr>
<h4 id="2023年9月14日"><a href="#2023年9月14日" class="headerlink" title="2023年9月14日"></a>2023年9月14日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-09-14.jpg"></img></p>
<hr>
<h4 id="2023年9月17日"><a href="#2023年9月17日" class="headerlink" title="2023年9月17日"></a>2023年9月17日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-09-17.jpg"></img></p>
<hr>
<h3 id="2023年10月"><a href="#2023年10月" class="headerlink" title="2023年10月"></a>2023年10月</h3><hr>
<h4 id="2023年10月30日"><a href="#2023年10月30日" class="headerlink" title="2023年10月30日"></a>2023年10月30日</h4><!-- more -->

<p><img class="half" src="/../images/exercise/2023-10-30.jpg"></img></p>
]]></content>
      <tags>
        <tag>运动</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>咖啡丶七的博客网站</title>
    <url>/2023/08/04/hello-world/</url>
    <content><![CDATA[<center>记录个人生活日常、学习笔记</center>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2064856926&auto=0&height=66"></iframe>

<center class="light">梦开始的地方</center>]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>组装电脑</title>
    <url>/2023/08/24/daily-2023-08-24/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/images.css">

<p>今天从零开始组装了一台电脑，用了7年的电脑终于退休了，说实话多多少少有点舍不得</p>
<p><img src="/../images/daily/2023-08-24/配置.png"></img></p>
<p><img src="/../images/daily/2023-08-24/分数.png"></img></p>
<p><img class="half" src="/../images/daily/2023-08-24/整机1.png"></img></p>
<p><img class="half" src="/../images/daily/2023-08-24/整机2.png"></img></p>
<p><img class="half" src="/../images/daily/2023-08-24/整机3.png"></img></p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>【Cpp】类型转换</title>
    <url>/2023/09/28/cpp-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="静态转换-Static-Cast"><a href="#静态转换-Static-Cast" class="headerlink" title="静态转换(Static Cast)"></a>静态转换(Static Cast)</h3><p>静态转换是将一种数据类型的值强制转换为另一种数据类型的值。</p>
<p>静态转换通常用于比较类型相似的对象之间的转换，例如将 int 类型转换为 float 类型。</p>
<p>静态转换不进行任何运行时类型检查，因此可能会导致运行时错误。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(i); <span class="comment">// 静态将int类型转换为float类型</span></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="动态转换-Dynamic-Cast"><a href="#动态转换-Dynamic-Cast" class="headerlink" title="动态转换(Dynamic Cast)"></a>动态转换(Dynamic Cast)</h3><p>动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。动态转换在运行时进行类型检查，如果不能进行转换则返回空指针或引发异常。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line">Base* ptr_base = <span class="keyword">new</span> Derived;</span><br><span class="line">Derived* ptr_derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base); <span class="comment">// 将基类指针转换为派生类指针</span></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="常量转换-Const-Cast"><a href="#常量转换-Const-Cast" class="headerlink" title="常量转换(Const Cast)"></a>常量转换(Const Cast)</h3><p>常量转换用于将 const 类型的对象转换为非 const 类型的对象。</p>
<p>常量转换只能用于转换掉 const 属性，不能改变对象的类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; r = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&amp;&gt;(i); <span class="comment">// 常量转换，将const int转换为int</span></span><br></pre></td></tr></table></figure>

<p>拓展：<code>const</code>定义的常量表示只读，不能更改。</p>
<hr>
<h3 id="重新解释转换-Reinterpret-Cast"><a href="#重新解释转换-Reinterpret-Cast" class="headerlink" title="重新解释转换(Reinterpret Cast)"></a>重新解释转换(Reinterpret Cast)</h3><p>重新解释转换将一个数据类型的值重新解释为另一个数据类型的值，通常用于在不同的数据类型之间进行转换。</p>
<p>重新解释转换不进行任何类型检查，因此可能会导致未定义的行为。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">float</span>&amp;&gt;(i); <span class="comment">// 重新解释将int类型转换为float类型</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】基础命令</title>
    <url>/2023/08/12/git-Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/center.css">
<link rel="stylesheet" href="/../css/images.css">

<h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><h4 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h4><p><img class="base" src="/../images/git/基础结构.png"></img></p>
<ol>
<li><p><code>Changes to be committed</code></p>
<p>文件已经被<code>git add &lt;file&gt;</code>存放在暂存区，现在有两条路可以走</p>
<ul>
<li>提交：使用<code>git commit -m &quot;&quot;</code>提交</li>
<li>恢复：使用<code>git restore --staged &lt;file&gt;</code>或<code>git reset &lt;file&gt;</code>将文件复原到工作区，文件修改的内容会保留</li>
</ul>
</li>
<li><p><code>Changes not staged for commit</code></p>
<p>文件被修改，但是还为被<code>git add &lt;file&gt;</code></p>
<ul>
<li>提交到暂存区：使用<code>git add &lt;file&gt;</code></li>
<li>恢复：使用<code>git restore &lt;file&gt;</code>或<code>git checkout &lt;file&gt;</code>将文件的内容恢复成上一次提交的内容</li>
</ul>
</li>
<li><p><code>Untracked files</code></p>
<p>新建的文件，还未被跟踪。这种状态的文件可以使用<code>.gitignore</code>文件取消跟踪</p>
<ul>
<li>使用<code>git add &lt;file&gt;</code>跟踪文件</li>
<li>使用<code>.gitignore</code>屏蔽文件</li>
<li>直接删除文件</li>
</ul>
</li>
</ol>
<hr>
<h3 id="Git远程命令"><a href="#Git远程命令" class="headerlink" title="Git远程命令"></a>Git远程命令</h3><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看绑定了哪些远程仓库</span><br><span class="line">git remote -v</span><br><span class="line">// 删除远程的绑定</span><br><span class="line">git remote remove &lt;name&gt;</span><br><span class="line">// 将本地仓库的&lt;branch_name&gt;分支推送到远程仓库的&lt;branch_name&gt;分支上</span><br><span class="line">git push -u &lt;origin_name&gt; &lt;branch_name&gt;</span><br><span class="line">// 将远程仓库的branch_name拉取到本地工作区</span><br><span class="line">git pull &lt;origin_name&gt; &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地的&lt;branch_name&gt;分支推送到远程的&lt;branch_name&gt;分支上</span></span><br><span class="line">git push &lt;origin_name&gt; &lt;branch_name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地的分支推送到远程分支上</span></span><br><span class="line">git push &lt;origin_name&gt; &lt;本地分支&gt;:&lt;远程分支&gt;</span><br></pre></td></tr></table></figure>

<p>还可以添加<code>-u</code>参数设置默认的推送和拉取映射关系<br>使用这个参数之后可以直接使用<code>git push</code>和<code>git pull</code>而不用再添加参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地的master分支推送到origin的master分支上，并设置这个为默认的推送和拉取映射</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后面如果需要推送或者拉取可不用携带参数，默认为origin远程的master分支</span></span><br><span class="line">git push # 将本地的master分支推送到远程的master分支上</span><br><span class="line">git pull # 将远程的master分支拉取到本地的master分支上</span><br></pre></td></tr></table></figure>

<p>注意：<br>经过测试发现携带<code>-u</code>参数时使用<code>master:main</code>的映射方法，后续使用<code>git push</code>无法成功的将本地的master分支推送到远程的main上<br>也就是说，如果使用了<code>-u</code>参数，那么需要推送到的远程分支名必须与本地分支名一致</p>
<h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><h5 id="将远程分支上的内容和到本地分支"><a href="#将远程分支上的内容和到本地分支" class="headerlink" title="将远程分支上的内容和到本地分支"></a>将远程分支上的内容和到本地分支</h5><p>有两种方法<code>git pull</code>和<code>git fetch</code><br>两者的关系是：<code>git pull</code>是执行了<code>git fetch</code>和<code>git merge</code>两个操作</p>
<h5 id="pull命令"><a href="#pull命令" class="headerlink" title="pull命令"></a>pull命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程的&lt;branch_name&gt;分支拉取到本地的&lt;branch_name&gt;分支上</span></span><br><span class="line">git pull &lt;origin_name&gt; &lt;branch_name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程的分支拉取到本地分支上</span></span><br><span class="line">git pull &lt;origin_name&gt; &lt;远程分支&gt;:&lt;本地分支&gt;</span><br></pre></td></tr></table></figure>

<p>可直接使用<code>git pull &lt;origin_name&gt; &lt;branch_name&gt;</code>将<code>&lt;origin_name&gt;/&lt;branch_name&gt;</code>的内容直接合并到本地</p>
<h5 id="fetch命令"><a href="#fetch命令" class="headerlink" title="fetch命令"></a>fetch命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch &lt;origin_name&gt; &lt;branch_name&gt;</span><br><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure>

<ol>
<li>使用<code>git fetch &lt;origin_name&gt; &lt;branch_name&gt;</code>将<code>&lt;origin_name&gt;/&lt;branch_name&gt;</code>的内容保存到<code>.git/FETCH_HEAD</code>文件中</li>
<li>使用<code>git merge FETCH_HEAD</code>将<code>FETCH_HEAD</code>中的信息合并到当前分支</li>
</ol>
<h5 id="将远程分支拉取到本地作为一个新的分支"><a href="#将远程分支拉取到本地作为一个新的分支" class="headerlink" title="将远程分支拉取到本地作为一个新的分支"></a>将远程分支拉取到本地作为一个新的分支</h5><p><code>git checkout -b &lt;new_local_branch&gt; &lt;origin/remote_banch_name&gt;</code></p>
<p>在本地创建一个<code>&lt;new_local_branch&gt;</code>分支并将<code>&lt;origin/remote_banch_name&gt;</code></p>
<hr>
<h3 id="查看log"><a href="#查看log" class="headerlink" title="查看log"></a>查看log</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有分支的提交记录之间的关系(以一行显示)</span></span><br><span class="line">git log --oneline --graph --all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看每个提交记录修改了哪些文件</span></span><br><span class="line">git log --stat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看每个提交记录具体的修改内容</span></span><br><span class="line">git log -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定显示多少条日志</span></span><br><span class="line">git log -2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定跳过多少条日志</span></span><br><span class="line">git log --skip=3</span><br></pre></td></tr></table></figure>











<center class="moderate">持续更新</center>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】忽略文件</title>
    <url>/2023/08/12/git-Git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="忽略已跟踪的文件"><a href="#忽略已跟踪的文件" class="headerlink" title="忽略已跟踪的文件"></a>忽略已跟踪的文件</h2><p>.gitignore文件只能忽略未跟踪状态的文件，如果已经被跟踪了，可以使用下面的两种方法</p>
<h3 id="git-rm-–cached"><a href="#git-rm-–cached" class="headerlink" title="git rm –cached &lt;file&gt;"></a>git rm –cached &lt;file&gt;</h3><p>彻底忽略该文件，push后，远程也将忽略该文件</p>
<p>如果远程仓库已经有了logs文件夹，使用三步完成</p>
<ol>
<li>使用命令删除文件的跟踪状态 <code>git rm --cached logs/</code></li>
<li>此时本地工作区修改还在，需要更新一下&#x2F;gitignore文件</li>
<li>最后使用命令删除远程仓库对应的文件<code>git add . &amp;&amp; git commit -m &quot;xx&quot; &amp;&amp; git push</code></li>
</ol>
<h3 id="skip-worktree和assume-unchanged"><a href="#skip-worktree和assume-unchanged" class="headerlink" title="skip-worktree和assume-unchanged"></a>skip-worktree和assume-unchanged</h3><p>只在自己的工作区内忽略文件</p>
<h4 id="skip-worktree"><a href="#skip-worktree" class="headerlink" title="skip-worktree"></a>skip-worktree</h4><p>skip-worktree可以实现修改本地文件不会被提交，但又可以拉取最新更改需求。适用于一些不经常变动，但是必须本地化设置的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 添加忽略文件</span><br><span class="line">git update-index --skip-worktree &lt;file&gt;</span><br><span class="line">// 取消忽略</span><br><span class="line">git update-index --no-skip-worktree &lt;file&gt;</span><br><span class="line">// 查看skip-worktree列表</span><br><span class="line">git ls-files -v | grep &#x27;^S\&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="assume-unchanged"><a href="#assume-unchanged" class="headerlink" title="assume-unchanged"></a>assume-unchanged</h4><p>该命令只是假设文件没有发生变动，使用reset时会将文件修改回去。当远程仓库相应的文件被修改时，pull更新之后，–assume-unchanged会被清楚</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 添加忽略文件</span><br><span class="line">git update-index --assume-unchanged &lt;file&gt;</span><br><span class="line">// 取消忽略</span><br><span class="line">git update-index --no-assume-unchanged &lt;file&gt;</span><br><span class="line">// 查看忽略了哪些文件</span><br><span class="line">git ls-files -v | grep &#x27;^h\&#x27;</span><br></pre></td></tr></table></figure>

<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/559692211">一文带你彻底搞懂Git！</a></p>
<hr>
<h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2><p>在此记录一下各个项目的<code>.gitignore</code>文件内容</p>
<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Byte-compiled / optimized / DLL files</span><br><span class="line">__pycache__/</span><br><span class="line">*.py[cod]</span><br><span class="line">*$py.class</span><br><span class="line"></span><br><span class="line"># C extensions</span><br><span class="line">*.so</span><br><span class="line"></span><br><span class="line"># Distribution / packaging</span><br><span class="line">.Python</span><br><span class="line">build/</span><br><span class="line">develop-eggs/</span><br><span class="line">dist/</span><br><span class="line">downloads/</span><br><span class="line">eggs/</span><br><span class="line">.eggs/</span><br><span class="line">lib/</span><br><span class="line">lib64/</span><br><span class="line">parts/</span><br><span class="line">sdist/</span><br><span class="line">var/</span><br><span class="line">wheels/</span><br><span class="line">share/python-wheels/</span><br><span class="line">*.egg-info/</span><br><span class="line">.installed.cfg</span><br><span class="line">*.egg</span><br><span class="line">MANIFEST</span><br><span class="line"></span><br><span class="line"># PyInstaller</span><br><span class="line">#  Usually these files are written by a python script from a template</span><br><span class="line">#  before PyInstaller builds the exe, so as to inject date/other infos into it.</span><br><span class="line">*.manifest</span><br><span class="line">*.spec</span><br><span class="line"></span><br><span class="line"># Installer logs</span><br><span class="line">pip-log.txt</span><br><span class="line">pip-delete-this-directory.txt</span><br><span class="line"></span><br><span class="line"># Unit test / coverage reports</span><br><span class="line">htmlcov/</span><br><span class="line">.tox/</span><br><span class="line">.nox/</span><br><span class="line">.coverage</span><br><span class="line">.coverage.*</span><br><span class="line">.cache</span><br><span class="line">nosetests.xml</span><br><span class="line">coverage.xml</span><br><span class="line">*.cover</span><br><span class="line">*.py,cover</span><br><span class="line">.hypothesis/</span><br><span class="line">.pytest_cache/</span><br><span class="line">cover/</span><br><span class="line"></span><br><span class="line"># Translations</span><br><span class="line">*.mo</span><br><span class="line">*.pot</span><br><span class="line"></span><br><span class="line"># Django stuff:</span><br><span class="line">*.log</span><br><span class="line">local_settings.py</span><br><span class="line">db.sqlite3</span><br><span class="line">db.sqlite3-journal</span><br><span class="line"></span><br><span class="line"># Flask stuff:</span><br><span class="line">instance/</span><br><span class="line">.webassets-cache</span><br><span class="line"></span><br><span class="line"># Scrapy stuff:</span><br><span class="line">.scrapy</span><br><span class="line"></span><br><span class="line"># Sphinx documentation</span><br><span class="line">docs/_build/</span><br><span class="line"></span><br><span class="line"># PyBuilder</span><br><span class="line">.pybuilder/</span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"># Jupyter Notebook</span><br><span class="line">.ipynb_checkpoints</span><br><span class="line"></span><br><span class="line"># IPython</span><br><span class="line">profile_default/</span><br><span class="line">ipython_config.py</span><br><span class="line"></span><br><span class="line"># pyenv</span><br><span class="line">#   For a library or package, you might want to ignore these files since the code is</span><br><span class="line">#   intended to run in multiple environments; otherwise, check them in:</span><br><span class="line"># .python-version</span><br><span class="line"></span><br><span class="line"># pipenv</span><br><span class="line">#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.</span><br><span class="line">#   However, in case of collaboration, if having platform-specific dependencies or dependencies</span><br><span class="line">#   having no cross-platform support, pipenv may install dependencies that don&#x27;t work, or not</span><br><span class="line">#   install all needed dependencies.</span><br><span class="line">#Pipfile.lock</span><br><span class="line"></span><br><span class="line"># poetry</span><br><span class="line">#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.</span><br><span class="line">#   This is especially recommended for binary packages to ensure reproducibility, and is more</span><br><span class="line">#   commonly ignored for libraries.</span><br><span class="line">#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control</span><br><span class="line">#poetry.lock</span><br><span class="line"></span><br><span class="line"># pdm</span><br><span class="line">#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.</span><br><span class="line">#pdm.lock</span><br><span class="line">#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it</span><br><span class="line">#   in version control.</span><br><span class="line">#   https://pdm.fming.dev/#use-with-ide</span><br><span class="line">.pdm.toml</span><br><span class="line"></span><br><span class="line"># PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm</span><br><span class="line">__pypackages__/</span><br><span class="line"></span><br><span class="line"># Celery stuff</span><br><span class="line">celerybeat-schedule</span><br><span class="line">celerybeat.pid</span><br><span class="line"></span><br><span class="line"># SageMath parsed files</span><br><span class="line">*.sage.py</span><br><span class="line"></span><br><span class="line"># Environments</span><br><span class="line">.env</span><br><span class="line">.venv</span><br><span class="line">env/</span><br><span class="line">venv/</span><br><span class="line">ENV/</span><br><span class="line">env.bak/</span><br><span class="line">venv.bak/</span><br><span class="line"></span><br><span class="line"># Spyder project settings</span><br><span class="line">.spyderproject</span><br><span class="line">.spyproject</span><br><span class="line"></span><br><span class="line"># Rope project settings</span><br><span class="line">.ropeproject</span><br><span class="line"></span><br><span class="line"># mkdocs documentation</span><br><span class="line">/site</span><br><span class="line"></span><br><span class="line"># mypy</span><br><span class="line">.mypy_cache/</span><br><span class="line">.dmypy.json</span><br><span class="line">dmypy.json</span><br><span class="line"></span><br><span class="line"># Pyre type checker</span><br><span class="line">.pyre/</span><br><span class="line"></span><br><span class="line"># pytype static type analyzer</span><br><span class="line">.pytype/</span><br><span class="line"></span><br><span class="line"># Cython debug symbols</span><br><span class="line">cython_debug/</span><br><span class="line"></span><br><span class="line"># PyCharm</span><br><span class="line">#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can</span><br><span class="line">#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore</span><br><span class="line">#  and can be added to the global gitignore or merged into this file.  For a more nuclear</span><br><span class="line">#  option (not recommended) you can uncomment the following to ignore the entire idea folder.</span><br><span class="line">#.idea/</span><br></pre></td></tr></table></figure>

<h4 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h4><p>项目中大量自动生成的*.meta文件是需要加入版本管理的</p>
<p>这个文件包含的信息：</p>
<ul>
<li>描述如何导入这个资产文件</li>
<li>如何在项目中准备资产</li>
</ul>
<p>根目录下的sln和csproj文件是为了能更好的使用Visual Studio，实际上Unity是用不上这个的，也是可以忽略掉的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This .gitignore file should be placed at the root of your Unity project directory</span><br><span class="line">#</span><br><span class="line"># Get latest from https://github.com/github/gitignore/blob/master/Unity.gitignore</span><br><span class="line">#</span><br><span class="line">/[Ll]ibrary/</span><br><span class="line">/[Tt]emp/</span><br><span class="line">/[Oo]bj/</span><br><span class="line">/[Bb]uild/</span><br><span class="line">/[Bb]uilds/</span><br><span class="line">/[Ll]ogs/</span><br><span class="line">/[Uu]ser[Ss]ettings/</span><br><span class="line"></span><br><span class="line"># MemoryCaptures can get excessive in size.</span><br><span class="line"># They also could contain extremely sensitive data</span><br><span class="line">/[Mm]emoryCaptures/</span><br><span class="line"></span><br><span class="line"># Asset meta data should only be ignored when the corresponding asset is also ignored</span><br><span class="line">!/[Aa]ssets/**/*.meta</span><br><span class="line"></span><br><span class="line"># Uncomment this line if you wish to ignore the asset store tools plugin</span><br><span class="line"># /[Aa]ssets/AssetStoreTools*</span><br><span class="line"></span><br><span class="line"># Autogenerated Jetbrains Rider plugin</span><br><span class="line">/[Aa]ssets/Plugins/Editor/JetBrains*</span><br><span class="line"></span><br><span class="line"># Visual Studio cache directory</span><br><span class="line">.vs/</span><br><span class="line"></span><br><span class="line"># Gradle cache directory</span><br><span class="line">.gradle/</span><br><span class="line"></span><br><span class="line"># Autogenerated VS/MD/Consulo solution and project files</span><br><span class="line">ExportedObj/</span><br><span class="line">.consulo/</span><br><span class="line">*.csproj</span><br><span class="line">*.unityproj</span><br><span class="line">*.sln</span><br><span class="line">*.suo</span><br><span class="line">*.tmp</span><br><span class="line">*.user</span><br><span class="line">*.userprefs</span><br><span class="line">*.pidb</span><br><span class="line">*.booproj</span><br><span class="line">*.svd</span><br><span class="line">*.pdb</span><br><span class="line">*.mdb</span><br><span class="line">*.opendb</span><br><span class="line">*.VC.db</span><br><span class="line"></span><br><span class="line"># Unity3D generated meta files</span><br><span class="line">*.pidb.meta</span><br><span class="line">*.pdb.meta</span><br><span class="line">*.mdb.meta</span><br><span class="line"></span><br><span class="line"># Unity3D generated file on crash reports</span><br><span class="line">sysinfo.txt</span><br><span class="line"></span><br><span class="line"># Builds</span><br><span class="line">*.apk</span><br><span class="line">*.unitypackage</span><br><span class="line"></span><br><span class="line"># Crashlytics generated file</span><br><span class="line">crashlytics-build.properties</span><br><span class="line"></span><br><span class="line"># Packed Addressables</span><br><span class="line">/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*</span><br><span class="line"></span><br><span class="line"># Temporary auto-generated Android Assets</span><br><span class="line">/[Aa]ssets/[Ss]treamingAssets/aa.meta</span><br><span class="line">/[Aa]ssets/[Ss]treamingAssets/aa/*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="vs的C-项目"><a href="#vs的C-项目" class="headerlink" title="vs的C#项目"></a>vs的C#项目</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Ignore Visual Studio temporary files, build results, and</span><br><span class="line">## files generated by popular Visual Studio add-ons.</span><br><span class="line">##</span><br><span class="line">## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore</span><br><span class="line"></span><br><span class="line"># User-specific files</span><br><span class="line">*.rsuser</span><br><span class="line">*.suo</span><br><span class="line">*.user</span><br><span class="line">*.userosscache</span><br><span class="line">*.sln.docstates</span><br><span class="line"></span><br><span class="line"># User-specific files (MonoDevelop/Xamarin Studio)</span><br><span class="line">*.userprefs</span><br><span class="line"></span><br><span class="line"># Mono auto generated files</span><br><span class="line">mono_crash.*</span><br><span class="line"></span><br><span class="line"># Build results</span><br><span class="line">[Dd]ebug/</span><br><span class="line">[Dd]ebugPublic/</span><br><span class="line">[Rr]elease/</span><br><span class="line">[Rr]eleases/</span><br><span class="line">x64/</span><br><span class="line">x86/</span><br><span class="line">[Ww][Ii][Nn]32/</span><br><span class="line">[Aa][Rr][Mm]/</span><br><span class="line">[Aa][Rr][Mm]64/</span><br><span class="line">bld/</span><br><span class="line">[Bb]in/</span><br><span class="line">[Oo]bj/</span><br><span class="line">[Ll]og/</span><br><span class="line">[Ll]ogs/</span><br><span class="line"></span><br><span class="line"># Visual Studio 2015/2017 cache/options directory</span><br><span class="line">.vs/</span><br><span class="line"># Uncomment if you have tasks that create the project&#x27;s static files in wwwroot</span><br><span class="line">#wwwroot/</span><br><span class="line"></span><br><span class="line"># Visual Studio 2017 auto generated files</span><br><span class="line">Generated Files/</span><br><span class="line"></span><br><span class="line"># MSTest test Results</span><br><span class="line">[Tt]est[Rr]esult*/</span><br><span class="line">[Bb]uild[Ll]og.*</span><br><span class="line"></span><br><span class="line"># NUnit</span><br><span class="line">*.VisualState.xml</span><br><span class="line">TestResult.xml</span><br><span class="line">nunit-*.xml</span><br><span class="line"></span><br><span class="line"># Build Results of an ATL Project</span><br><span class="line">[Dd]ebugPS/</span><br><span class="line">[Rr]eleasePS/</span><br><span class="line">dlldata.c</span><br><span class="line"></span><br><span class="line"># Benchmark Results</span><br><span class="line">BenchmarkDotNet.Artifacts/</span><br><span class="line"></span><br><span class="line"># .NET Core</span><br><span class="line">project.lock.json</span><br><span class="line">project.fragment.lock.json</span><br><span class="line">artifacts/</span><br><span class="line"></span><br><span class="line"># ASP.NET Scaffolding</span><br><span class="line">ScaffoldingReadMe.txt</span><br><span class="line"></span><br><span class="line"># StyleCop</span><br><span class="line">StyleCopReport.xml</span><br><span class="line"></span><br><span class="line"># Files built by Visual Studio</span><br><span class="line">*_i.c</span><br><span class="line">*_p.c</span><br><span class="line">*_h.h</span><br><span class="line">*.ilk</span><br><span class="line">*.meta</span><br><span class="line">*.obj</span><br><span class="line">*.iobj</span><br><span class="line">*.pch</span><br><span class="line">*.pdb</span><br><span class="line">*.ipdb</span><br><span class="line">*.pgc</span><br><span class="line">*.pgd</span><br><span class="line">*.rsp</span><br><span class="line">*.sbr</span><br><span class="line">*.tlb</span><br><span class="line">*.tli</span><br><span class="line">*.tlh</span><br><span class="line">*.tmp</span><br><span class="line">*.tmp_proj</span><br><span class="line">*_wpftmp.csproj</span><br><span class="line">*.log</span><br><span class="line">*.vspscc</span><br><span class="line">*.vssscc</span><br><span class="line">.builds</span><br><span class="line">*.pidb</span><br><span class="line">*.svclog</span><br><span class="line">*.scc</span><br><span class="line"></span><br><span class="line"># Chutzpah Test files</span><br><span class="line">_Chutzpah*</span><br><span class="line"></span><br><span class="line"># Visual C++ cache files</span><br><span class="line">ipch/</span><br><span class="line">*.aps</span><br><span class="line">*.ncb</span><br><span class="line">*.opendb</span><br><span class="line">*.opensdf</span><br><span class="line">*.sdf</span><br><span class="line">*.cachefile</span><br><span class="line">*.VC.db</span><br><span class="line">*.VC.VC.opendb</span><br><span class="line"></span><br><span class="line"># Visual Studio profiler</span><br><span class="line">*.psess</span><br><span class="line">*.vsp</span><br><span class="line">*.vspx</span><br><span class="line">*.sap</span><br><span class="line"></span><br><span class="line"># Visual Studio Trace Files</span><br><span class="line">*.e2e</span><br><span class="line"></span><br><span class="line"># TFS 2012 Local Workspace</span><br><span class="line">$tf/</span><br><span class="line"></span><br><span class="line"># Guidance Automation Toolkit</span><br><span class="line">*.gpState</span><br><span class="line"></span><br><span class="line"># ReSharper is a .NET coding add-in</span><br><span class="line">_ReSharper*/</span><br><span class="line">*.[Rr]e[Ss]harper</span><br><span class="line">*.DotSettings.user</span><br><span class="line"></span><br><span class="line"># TeamCity is a build add-in</span><br><span class="line">_TeamCity*</span><br><span class="line"></span><br><span class="line"># DotCover is a Code Coverage Tool</span><br><span class="line">*.dotCover</span><br><span class="line"></span><br><span class="line"># AxoCover is a Code Coverage Tool</span><br><span class="line">.axoCover/*</span><br><span class="line">!.axoCover/settings.json</span><br><span class="line"></span><br><span class="line"># Coverlet is a free, cross platform Code Coverage Tool</span><br><span class="line">coverage*.json</span><br><span class="line">coverage*.xml</span><br><span class="line">coverage*.info</span><br><span class="line"></span><br><span class="line"># Visual Studio code coverage results</span><br><span class="line">*.coverage</span><br><span class="line">*.coveragexml</span><br><span class="line"></span><br><span class="line"># NCrunch</span><br><span class="line">_NCrunch_*</span><br><span class="line">.*crunch*.local.xml</span><br><span class="line">nCrunchTemp_*</span><br><span class="line"></span><br><span class="line"># MightyMoose</span><br><span class="line">*.mm.*</span><br><span class="line">AutoTest.Net/</span><br><span class="line"></span><br><span class="line"># Web workbench (sass)</span><br><span class="line">.sass-cache/</span><br><span class="line"></span><br><span class="line"># Installshield output folder</span><br><span class="line">[Ee]xpress/</span><br><span class="line"></span><br><span class="line"># DocProject is a documentation generator add-in</span><br><span class="line">DocProject/buildhelp/</span><br><span class="line">DocProject/Help/*.HxT</span><br><span class="line">DocProject/Help/*.HxC</span><br><span class="line">DocProject/Help/*.hhc</span><br><span class="line">DocProject/Help/*.hhk</span><br><span class="line">DocProject/Help/*.hhp</span><br><span class="line">DocProject/Help/Html2</span><br><span class="line">DocProject/Help/html</span><br><span class="line"></span><br><span class="line"># Click-Once directory</span><br><span class="line">publish/</span><br><span class="line"></span><br><span class="line"># Publish Web Output</span><br><span class="line">*.[Pp]ublish.xml</span><br><span class="line">*.azurePubxml</span><br><span class="line"># Note: Comment the next line if you want to checkin your web deploy settings,</span><br><span class="line"># but database connection strings (with potential passwords) will be unencrypted</span><br><span class="line">*.pubxml</span><br><span class="line">*.publishproj</span><br><span class="line"></span><br><span class="line"># Microsoft Azure Web App publish settings. Comment the next line if you want to</span><br><span class="line"># checkin your Azure Web App publish settings, but sensitive information contained</span><br><span class="line"># in these scripts will be unencrypted</span><br><span class="line">PublishScripts/</span><br><span class="line"></span><br><span class="line"># NuGet Packages</span><br><span class="line">*.nupkg</span><br><span class="line"># NuGet Symbol Packages</span><br><span class="line">*.snupkg</span><br><span class="line"># The packages folder can be ignored because of Package Restore</span><br><span class="line">**/[Pp]ackages/*</span><br><span class="line"># except build/, which is used as an MSBuild target.</span><br><span class="line">!**/[Pp]ackages/build/</span><br><span class="line"># Uncomment if necessary however generally it will be regenerated when needed</span><br><span class="line">#!**/[Pp]ackages/repositories.config</span><br><span class="line"># NuGet v3&#x27;s project.json files produces more ignorable files</span><br><span class="line">*.nuget.props</span><br><span class="line">*.nuget.targets</span><br><span class="line"></span><br><span class="line"># Microsoft Azure Build Output</span><br><span class="line">csx/</span><br><span class="line">*.build.csdef</span><br><span class="line"></span><br><span class="line"># Microsoft Azure Emulator</span><br><span class="line">ecf/</span><br><span class="line">rcf/</span><br><span class="line"></span><br><span class="line"># Windows Store app package directories and files</span><br><span class="line">AppPackages/</span><br><span class="line">BundleArtifacts/</span><br><span class="line">Package.StoreAssociation.xml</span><br><span class="line">_pkginfo.txt</span><br><span class="line">*.appx</span><br><span class="line">*.appxbundle</span><br><span class="line">*.appxupload</span><br><span class="line"></span><br><span class="line"># Visual Studio cache files</span><br><span class="line"># files ending in .cache can be ignored</span><br><span class="line">*.[Cc]ache</span><br><span class="line"># but keep track of directories ending in .cache</span><br><span class="line">!?*.[Cc]ache/</span><br><span class="line"></span><br><span class="line"># Others</span><br><span class="line">ClientBin/</span><br><span class="line">~$*</span><br><span class="line">*~</span><br><span class="line">*.dbmdl</span><br><span class="line">*.dbproj.schemaview</span><br><span class="line">*.jfm</span><br><span class="line">*.pfx</span><br><span class="line">*.publishsettings</span><br><span class="line">orleans.codegen.cs</span><br><span class="line"></span><br><span class="line"># Including strong name files can present a security risk</span><br><span class="line"># (https://github.com/github/gitignore/pull/2483#issue-259490424)</span><br><span class="line">#*.snk</span><br><span class="line"></span><br><span class="line"># Since there are multiple workflows, uncomment next line to ignore bower_components</span><br><span class="line"># (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)</span><br><span class="line">#bower_components/</span><br><span class="line"></span><br><span class="line"># RIA/Silverlight projects</span><br><span class="line">Generated_Code/</span><br><span class="line"></span><br><span class="line"># Backup &amp; report files from converting an old project file</span><br><span class="line"># to a newer Visual Studio version. Backup files are not needed,</span><br><span class="line"># because we have git ;-)</span><br><span class="line">_UpgradeReport_Files/</span><br><span class="line">Backup*/</span><br><span class="line">UpgradeLog*.XML</span><br><span class="line">UpgradeLog*.htm</span><br><span class="line">ServiceFabricBackup/</span><br><span class="line">*.rptproj.bak</span><br><span class="line"></span><br><span class="line"># SQL Server files</span><br><span class="line">*.mdf</span><br><span class="line">*.ldf</span><br><span class="line">*.ndf</span><br><span class="line"></span><br><span class="line"># Business Intelligence projects</span><br><span class="line">*.rdl.data</span><br><span class="line">*.bim.layout</span><br><span class="line">*.bim_*.settings</span><br><span class="line">*.rptproj.rsuser</span><br><span class="line">*- [Bb]ackup.rdl</span><br><span class="line">*- [Bb]ackup ([0-9]).rdl</span><br><span class="line">*- [Bb]ackup ([0-9][0-9]).rdl</span><br><span class="line"></span><br><span class="line"># Microsoft Fakes</span><br><span class="line">FakesAssemblies/</span><br><span class="line"></span><br><span class="line"># GhostDoc plugin setting file</span><br><span class="line">*.GhostDoc.xml</span><br><span class="line"></span><br><span class="line"># Node.js Tools for Visual Studio</span><br><span class="line">.ntvs_analysis.dat</span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"># Visual Studio 6 build log</span><br><span class="line">*.plg</span><br><span class="line"></span><br><span class="line"># Visual Studio 6 workspace options file</span><br><span class="line">*.opt</span><br><span class="line"></span><br><span class="line"># Visual Studio 6 auto-generated workspace file (contains which files were open etc.)</span><br><span class="line">*.vbw</span><br><span class="line"></span><br><span class="line"># Visual Studio LightSwitch build output</span><br><span class="line">**/*.HTMLClient/GeneratedArtifacts</span><br><span class="line">**/*.DesktopClient/GeneratedArtifacts</span><br><span class="line">**/*.DesktopClient/ModelManifest.xml</span><br><span class="line">**/*.Server/GeneratedArtifacts</span><br><span class="line">**/*.Server/ModelManifest.xml</span><br><span class="line">_Pvt_Extensions</span><br><span class="line"></span><br><span class="line"># Paket dependency manager</span><br><span class="line">.paket/paket.exe</span><br><span class="line">paket-files/</span><br><span class="line"></span><br><span class="line"># FAKE - F# Make</span><br><span class="line">.fake/</span><br><span class="line"></span><br><span class="line"># CodeRush personal settings</span><br><span class="line">.cr/personal</span><br><span class="line"></span><br><span class="line"># Python Tools for Visual Studio (PTVS)</span><br><span class="line">__pycache__/</span><br><span class="line">*.pyc</span><br><span class="line"></span><br><span class="line"># Cake - Uncomment if you are using it</span><br><span class="line"># tools/**</span><br><span class="line"># !tools/packages.config</span><br><span class="line"></span><br><span class="line"># Tabs Studio</span><br><span class="line">*.tss</span><br><span class="line"></span><br><span class="line"># Telerik&#x27;s JustMock configuration file</span><br><span class="line">*.jmconfig</span><br><span class="line"></span><br><span class="line"># BizTalk build output</span><br><span class="line">*.btp.cs</span><br><span class="line">*.btm.cs</span><br><span class="line">*.odx.cs</span><br><span class="line">*.xsd.cs</span><br><span class="line"></span><br><span class="line"># OpenCover UI analysis results</span><br><span class="line">OpenCover/</span><br><span class="line"></span><br><span class="line"># Azure Stream Analytics local run output</span><br><span class="line">ASALocalRun/</span><br><span class="line"></span><br><span class="line"># MSBuild Binary and Structured Log</span><br><span class="line">*.binlog</span><br><span class="line"></span><br><span class="line"># NVidia Nsight GPU debugger configuration file</span><br><span class="line">*.nvuser</span><br><span class="line"></span><br><span class="line"># MFractors (Xamarin productivity tool) working folder</span><br><span class="line">.mfractor/</span><br><span class="line"></span><br><span class="line"># Local History for Visual Studio</span><br><span class="line">.localhistory/</span><br><span class="line"></span><br><span class="line"># BeatPulse healthcheck temp database</span><br><span class="line">healthchecksdb</span><br><span class="line"></span><br><span class="line"># Backup folder for Package Reference Convert tool in Visual Studio 2017</span><br><span class="line">MigrationBackup/</span><br><span class="line"></span><br><span class="line"># Ionide (cross platform F# VS Code tools) working folder</span><br><span class="line">.ionide/</span><br><span class="line"></span><br><span class="line"># Fody - auto-generated XML schema</span><br><span class="line">FodyWeavers.xsd</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】合并分支及如何解决冲突</title>
    <url>/2023/09/15/git-%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/center.css">
<link rel="stylesheet" href="/../css/images.css">


<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>使用<code>git merge &lt;branchName&gt;</code>命令将<code>&lt;branchName&gt;</code>分支上的内容合并到当前所在的分支上</p>
<p><code>&lt;branchName&gt;</code> 可以是分支的名字，也可以是<code>commitID</code></p>
<h4 id="出现冲突"><a href="#出现冲突" class="headerlink" title="出现冲突"></a>出现冲突</h4><p>出现如下内容，说明自动合并发生了冲突，需要手动解决冲突</p>
<p><img class="base" src="/../images/git/合并分支_冲突.png"></img></p>
<p>使用<code>git status</code>查看冲突文件<br><img class="base" src="/../images/git/合并分支_冲突文件.png"></img></p>
<p>使用<code>git diff</code>查看冲突内容<br><img class="base" src="/../images/git/合并分支_冲突内容.png"></img></p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><h4 id="解决冲突的三种方法"><a href="#解决冲突的三种方法" class="headerlink" title="解决冲突的三种方法"></a>解决冲突的三种方法</h4><h5 id="方法一-直接编辑"><a href="#方法一-直接编辑" class="headerlink" title="方法一:直接编辑"></a>方法一:直接编辑</h5><p>使用<code>vim &lt;fielName&gt;</code>编辑该文件，留下我们需要的内容<br>随便怎么改都行，你就把它想成是重新编辑文件，只不过给了你两个版本的提示</p>
<p>修改前：</p>
<p><img class="base" src="/../images/git/合并分支_编辑文件.png"></img></p>
<p>修改后：</p>
<p><img class="base" src="/../images/git/合并分支_修复冲突.png"></img></p>
<h5 id="方法二-保留选择的版本"><a href="#方法二-保留选择的版本" class="headerlink" title="方法二:保留选择的版本"></a>方法二:保留选择的版本</h5><p>选择当前分支的版本作为解决方案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --ours &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<p>选择合并分支的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --theirs &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<h5 id="方法三：强行退出merge模式"><a href="#方法三：强行退出merge模式" class="headerlink" title="方法三：强行退出merge模式"></a>方法三：强行退出merge模式</h5><p>该命令将会抛弃合并过程并且尝试重建合并前的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure>



<h4 id="保存提交"><a href="#保存提交" class="headerlink" title="保存提交"></a>保存提交</h4><p>最后再重新提交一遍就成功的解决了冲突</p>
<p><img class="base" src="/../images/git/合并分支_提交冲突文件.png"></img></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】【Git】Linux系统安装Git</title>
    <url>/2023/08/23/linux-Git%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/git/git/tags">下载包体</a></p>
<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install libcurl-devel</span><br><span class="line">sudo yum install expat-devel</span><br><span class="line">sudo yum install asciidoc</span><br><span class="line">sudo yum install xmlto</span><br><span class="line">sudo yum install docbook2X</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置软连接</span></span><br><span class="line">ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi</span><br><span class="line">ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2texi</span><br></pre></td></tr></table></figure>

<p>根据git官网的指示，安装相关依赖包：<code>yum install dh-autoreconf curl-devel expat-devel gettext-devel openssl-devel perl-devel zlib-devel libxslt asciidoc xmlto docbook2X autoconf install-info getopt</code></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压<code>tar -zxvf git-2.42.0.tar.gz</code></p>
<p>编译<code>make prefix=/usr/local all doc info</code></p>
<p>安装<code>make prefix=/usr/local install install-doc install-html install-info</code></p>
<h3 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h3><p>提示找不到<code>docbook2x-texi</code>或者<code>docbook2texi</code></p>
<p>在执行<code>yum install docbook2X</code>后设置软连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi</span><br><span class="line">ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2texi</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_42108074/article/details/123027943">使用源码方法在阿里云服务器CentOS 7安装Git</a></p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux基础命令</title>
    <url>/2023/08/22/linux-Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><table>
<thead>
<tr>
<th>基础命令</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>systemctl start firewalld.service</code></td>
<td>开启防火墙</td>
</tr>
<tr>
<td><code>systemctl status firewalld.service</code></td>
<td>查看防火墙状态</td>
</tr>
<tr>
<td><code>systemctl stop firewalld.service</code></td>
<td>关闭防火墙</td>
</tr>
<tr>
<td><code>systemctl enable firewalld.service</code></td>
<td>开启时自启</td>
</tr>
<tr>
<td><code>systemctl disable firewall.service</code></td>
<td>关闭开机自启</td>
</tr>
<tr>
<td><code>systemctl is-enable firewall.service</code></td>
<td>查看服务是否开机自启</td>
</tr>
<tr>
<td><code>systemctl --failed</code></td>
<td>查看启动失败的服务列表</td>
</tr>
</tbody></table>
<h4 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><table>
<thead>
<tr>
<th>命令</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>firewall-cmd --zone=public --list-ports</code></td>
<td>查看开放的端口</td>
</tr>
<tr>
<td><code>firewall-cmd --reload</code></td>
<td>重新载入防火墙</td>
</tr>
<tr>
<td><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></td>
<td>开放80端口，<code>--premanent</code>表示永久开放，重启后也依然开放</td>
</tr>
</tbody></table>
<p>每次在配置完防火墙之后需使用<code>firewall-cmd --reload</code>更新配置</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Nginx</title>
    <url>/2023/08/21/linux-Nginx/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="下载包体"><a href="#下载包体" class="headerlink" title="下载包体"></a>下载包体</h4><p>网站：<a href="https://nginx.org/en/download.html">nginx: download</a></p>
<p><img src="/../images/linux/nginx/安装网站.png"></img></p>
<h4 id="上传解压"><a href="#上传解压" class="headerlink" title="上传解压"></a>上传解压</h4><p><code>tar -zxvf nginx-1.24.0.tar.gz</code></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></p>
<p><code>make</code></p>
<p><code>make install</code></p>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>设置快捷键</p>
<p><code>ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</code></p>
<p>这样执行&#x2F;usr&#x2F;bin&#x2F;nginx就相当于执行了&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</p>
<p>而&#x2F;usr&#x2F;bin&#x2F;是全局可用的，所以在任何地方输入nginx都可以执行&#x2F;usr&#x2F;lcoal&#x2F;nginx&#x2F;sbin&#x2F;nginx</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Nvim</title>
    <url>/2023/08/22/linux-Neovim/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="下载包体"><a href="#下载包体" class="headerlink" title="下载包体"></a>下载包体</h4><p><a href="https://github.com/neovim/neovim/releases">https://github.com/neovim/neovim/releases</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf neovim-0.8.0.tar.gz</span><br><span class="line"><span class="comment"># 解压后就可以直接用了，十分方便</span></span><br><span class="line">./nvim-linux64/bin/nvim</span><br><span class="line"><span class="comment"># 可以将其放在/usr/local下，然后创建软链接</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/nvim/bin/nvim /usr/bin/nvim</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><h5 id="默认配置文件路径："><a href="#默认配置文件路径：" class="headerlink" title="默认配置文件路径："></a>默认配置文件路径：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.config/nvim</span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">nvim ~/.config/nvim/init.vim</span><br></pre></td></tr></table></figure>

<h5 id="自定义配置文件的路径："><a href="#自定义配置文件的路径：" class="headerlink" title="自定义配置文件的路径："></a>自定义配置文件的路径：</h5><ol>
<li>创建配置文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nvim-linux64</span><br><span class="line"><span class="built_in">mkdir</span> ./config</span><br><span class="line"><span class="built_in">mkdir</span> ./config/nvim</span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">nvim ./config/nvim/init.vim</span><br></pre></td></tr></table></figure>

<p><img src="/../images/linux/nvim/配置文件1.png"></img></p>
<ol start="2">
<li><code>nvim /etc/profile</code>修改环境变量</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nvim配置文件</span></span><br><span class="line"><span class="built_in">export</span> XDG_CONFIG_HOME=/usr/local/nvim-linux64/config</span><br><span class="line"><span class="built_in">export</span> XDG_DATA_HOME=/usr/local/nvim-linux64/config</span><br></pre></td></tr></table></figure>

<p><img src="/../images/linux/nvim/配置文件2.png"></img></p>
<ol start="3">
<li>重载配置文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; 基础键位映射</span></span><br><span class="line"><span class="string">imap jk &lt;Esc&gt;</span></span><br><span class="line"><span class="string">nmap &lt;space&gt; :</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 显示相对行</span><br><span class="line"><span class="built_in">set</span> relativenumber</span><br><span class="line"><span class="built_in">set</span> number</span><br></pre></td></tr></table></figure>

<h4 id="安装vim-plug插件管理"><a href="#安装vim-plug插件管理" class="headerlink" title="安装vim-plug插件管理"></a>安装vim-plug插件管理</h4><p>前面不是命名了全局变量<code>XDG_DATA_HOME</code>吗，这个时候就用上了</p>
<p>创建路径<code>/usr/local/nvim-linux64/config/nvim/site/autoload/</code></p>
<p>并将<code>plug.vim</code>文件放在这个路径下</p>
<p><a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim">Download plug.vim</a></p>
<hr>
<h3 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot; 基础键位映射</span><br><span class="line">imap jk &lt;Esc&gt;</span><br><span class="line">nmap &lt;space&gt; :</span><br><span class="line"></span><br><span class="line">&quot; 显示相对行</span><br><span class="line">set relativenumber</span><br><span class="line">set number</span><br><span class="line"></span><br><span class="line">&quot; nerdtree插件绑定</span><br><span class="line">map &lt;silent&gt; &lt;C-e&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; python补全</span><br><span class="line">filetype plugin on</span><br><span class="line">let g:pydiction_location = &#x27;$XDG_CONFIG_HOME\\nvim-data\\plugged\\pydiction\\complete-dict&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#begin()</span><br><span class="line"></span><br><span class="line">Plug &#x27;scrooloose/nerdtree&#x27;</span><br><span class="line">Plug &#x27;rkulla/pydiction&#x27;</span><br><span class="line"></span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】MySQL安装</title>
    <url>/2023/08/21/mysql-MySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="下载包体"><a href="#下载包体" class="headerlink" title="下载包体"></a>下载包体</h4><p>官网网址：<a href="https://dev.mysql.com/downloads/">MySQL :: MySQL Community Downloads</a></p>
<p><img src="/../images/linux/mysql/安装网址1.png"></img></p>
<p><img src="/../images/linux/mysql/安装网址2.png"></img></p>
<p><img src="/../images/linux/mysql/安装网址3.png"></img></p>
<p>将文件解压到一个新建的文件夹中<code>tar -xvf mysql-8.0.33-1.el7.x86_64.rpm-bundle.tar -C mysql-8.0.33</code></p>
<p>安装<code>openssl-devel</code>插件，mysql里有些rpm的安装依赖于该插件</p>
<h4 id="安装rpm包"><a href="#安装rpm包" class="headerlink" title="安装rpm包"></a>安装rpm包</h4><p>依次执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 共享的 MySQL 通用文件，可能包括一些共享的配置文件等。这是 MySQL 安装的一部分，通常需要安装</span></span><br><span class="line">rpm -ivh mysql-community-common-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># MySQL 客户端插件，提供额外的功能和扩展。具体需要哪些插件取决于你的使用情况。你可以根据你的需要来决定是否安装这些插件。</span></span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># MySQL 库文件，用于在应用程序中连接到 MySQL 数据库。这是 MySQL 连接所必需的，通常需要安装</span></span><br><span class="line">rpm -ivh mysql-community-libs-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># 共享的 MySQL 通用文件，可能包括一些共享的配置文件等。这是 MySQL 安装的一部分，通常需要安装</span></span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># MySQL 开发包，包含开发所需的头文件和库文件。如果你打算在该系统上开发与 MySQL 相关的应用程序，你需要安装此包</span></span><br><span class="line">rpm -ivh mysql-community-devel-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># MySQL 客户端工具，用于连接和管理 MySQL 服务器。通常情况下，如果你计划从该系统上远程连接到其他 MySQL 服务器，你需要安装此包。如果你的系统不需要连接其他 MySQL 服务器，则可能不需要安装</span></span><br><span class="line">rpm -ivh mysql-community-client-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># ICU 数据文件，用于支持国际化和字符集处理。如果你的应用程序不需要特定的国际化功能，则可能不需要安装</span></span><br><span class="line">rpm -ivh mysql-community-icu-data-files-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># MySQL 服务器，用于托管数据库实例。如果你计划在该系统上安装 MySQL 数据库服务器，你需要安装此包</span></span><br><span class="line">rpm -ivh mysql-community-server-8.0.33-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>使用<code>systemctl start mysqld</code>命令启动服务器</p>
<p>rpm安装MySQL会自动生成一个随机密码，可以在<code>/var/log/mysqld.log</code>中查看</p>
<img src="/../images/linux/mysql/随机密码.png">

<p>使用<code>mysql -u root -p</code>进入客户端</p>
<img src="/../images/linux/mysql/输入密码.png">

<h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><p>连接MySQL之后，使用<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456789&#39;;</code>修改密码</p>
<img src="/../images/linux/mysql/设置密码.png">

<p>出现<code>Your password does not satisfy the current policy requirements</code>提示，意思是您的密码不符合当前规定的要求，你要么就把你的密码设置得复杂点，要么就去降低密码的校验规则。</p>
<p>在 Linux 上安装 MySQL 时会自动安装一个校验密码的插件，默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。修改密码时新密码是否符合当前的策略，不满足则会提示ERROR</p>
<p>可以将这个限制密码位数设小一点，复杂度类型调底一点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将密码复杂度校验调整简单类型</span></span><br><span class="line"><span class="built_in">set</span> global validate_password.policy = 0;</span><br><span class="line"><span class="comment"># 设置密码最少位数限制为 4 位</span></span><br><span class="line"><span class="built_in">set</span> global validate_password.length = 4;</span><br></pre></td></tr></table></figure>

<img src="/../images/linux/mysql/设置密码复杂度.png">

<hr>
<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>可能遇到的问题</p>
<h4 id="MySQL自身原因"><a href="#MySQL自身原因" class="headerlink" title="MySQL自身原因"></a>MySQL自身原因</h4><p>MySQL默认不允许远程连接，修改配置</p>
<ol>
<li>使用<code>mysql -u root -p</code>链接服务器</li>
<li><code>show databases;</code>查看当前所有数据库</li>
<li><code>use mysql;</code>进入mysql数据库（配置mysql的一个数据库）</li>
<li><code>select user,host from user;</code>查看用户的链接方式</li>
</ol>
<img src="/../images/linux/mysql/连接方式.png">

<ol start="5">
<li>使用<code>update user set host=&#39;%&#39; where user=&#39;root&#39;;</code>将root的链接方式修改为%</li>
<li><code>systemctl restart mysqld</code>重启mysql服务器</li>
</ol>
<h4 id="外在原因"><a href="#外在原因" class="headerlink" title="外在原因"></a>外在原因</h4><ol>
<li>MySQL是否关掉了</li>
<li>防火墙的3306端口是否对外开放了</li>
<li>如果你是云服务器还需要开放3306的安全组</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开放80端口，`--premanent`表示永久开放，重启后也依然开放</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="comment"># 重新加载防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>



<hr>
<p>参考连接：<a href="https://blog.csdn.net/u013733643/article/details/128970496">Linux-安装MySQL（详细教程）</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】MySQL语法</title>
    <url>/2023/08/29/mysql-MySQL%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="MySQL客户端"><a href="#MySQL客户端" class="headerlink" title="MySQL客户端"></a>MySQL客户端</h3><ul>
<li>如果安装了MySQL-Shell可以直接使用<code>mysqlsh</code>进入MySQL-Shell客户端，然后使用<code>\connect root@localhost</code>来连接数据库</li>
<li>也可以使用<code>mysql -u root -p</code>来进入MySQL客户端</li>
</ul>
<h4 id="MySQL-Shell语法"><a href="#MySQL-Shell语法" class="headerlink" title="MySQL-Shell语法"></a>MySQL-Shell语法</h4><table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>\connect root@localhost</code></td>
<td>连接数据库</td>
</tr>
<tr>
<td><code>\help</code></td>
<td>帮助</td>
</tr>
<tr>
<td><code>\py</code></td>
<td>切换到python语言</td>
</tr>
<tr>
<td><code>\sql</code></td>
<td>切换成sql语言</td>
</tr>
<tr>
<td><code>\js</code></td>
<td>切换成js语言</td>
</tr>
<tr>
<td><code>\use &lt;database_name&gt;</code></td>
<td>切换并进入<database_name>数据库</td>
</tr>
</tbody></table>
<h4 id="数据库语法"><a href="#数据库语法" class="headerlink" title="数据库语法"></a>数据库语法</h4><table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>SHOW DATABASES;</code></td>
<td>展示所有数据库</td>
</tr>
<tr>
<td><code>CREATE DATABASE &lt;database_name&gt;;</code></td>
<td>创建数据库</td>
</tr>
<tr>
<td><code>DROP DATABASE &lt;database_name&gt;;</code></td>
<td>删除数据库</td>
</tr>
<tr>
<td><code>USE &lt;database_name&gt;;</code></td>
<td>选择数据库</td>
</tr>
</tbody></table>
<hr>
<h3 id="数据导入和导出"><a href="#数据导入和导出" class="headerlink" title="数据导入和导出"></a>数据导入和导出</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>在MySQL-Shell中使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -u指定用户，-p后续输入密码，game &gt; game.sql将数据库game导出到game.sql文件中</span><br><span class="line">mysqldump -u root -p game &gt; game.sql</span><br><span class="line"># 将game数据库的player表导出到player.sql中</span><br><span class="line">mysqldump -u root -p game player &gt; player.sql</span><br></pre></td></tr></table></figure>

<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>在Shell中使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将game.sql的数据导入到game数据库中</span></span><br><span class="line">mysql -u root -p game &lt; game.sql</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>DESC &lt;table_name&gt;</code></td>
<td>展示表结构</td>
</tr>
<tr>
<td><code>SHOW TABLES;</code></td>
<td>展示所有表</td>
</tr>
<tr>
<td><code>CREATE TABLE &lt;table_name&gt; &lt;表的结构定义&gt;;</code></td>
<td>创建表</td>
</tr>
<tr>
<td><code>DROP TABLE &lt;table_name&gt;;</code></td>
<td>删除表</td>
</tr>
</tbody></table>
<h4 id="定义表结构"><a href="#定义表结构" class="headerlink" title="定义表结构"></a>定义表结构</h4><p>在创建表的时候可以，定义列名、列的<a href="./#数据类型">数据类型</a>和<a href="./#定义表结构">表结构</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE player (</span><br><span class="line">	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,			-- 列名为id，数据类型为INT，不能为NULL，并且设置为自增长的主键</span><br><span class="line">    name VARCHAR(100) UNIQUE,	-- 长度为100的变长字符串这个字段必须为唯一值</span><br><span class="line">    level INT DEFAULT 1,  		-- 列名为level，数据类型为INT，默认值为1</span><br><span class="line">    exp INT,</span><br><span class="line">    gold DECIMAL(10,2)			-- 长度为10，并且保留两位小数的十进制数</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 添加列</span><br><span class="line">ALTER TABLE &lt;table_name&gt; ADD &lt;col&gt; &lt;value_type&gt;;</span><br><span class="line">-- 删除列</span><br><span class="line">ALTER TABLE &lt;table_name&gt; DROP &lt;col&gt;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将player表的level列的数据类型设置为INT，默认值设置为1</span><br><span class="line">ALTER TABLE player MODIFY level INT DEFAULT 1;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>ALTER TABLE &lt;table_name&gt; MODIFY &lt;col&gt; &lt;value_type&gt; DEFAULT &lt;value&gt;;</code></td>
<td>设置默认值为&lt;value&gt;</td>
</tr>
<tr>
<td><code>ALTER TABLE &lt;table_name&gt; MODIFY &lt;col&gt; &lt;value_type&gt; [NOT] NULL;</code></td>
<td>设置[不]可以为NULL</td>
</tr>
<tr>
<td><code>ALTER TABLE &lt;table_name&gt; ADD UNIQUE (&lt;col&gt;);</code></td>
<td>设置为唯一性，<strong>需要使用括号</strong></td>
</tr>
<tr>
<td><code>ALTER TABLE &lt;table_name&gt; MODIFT &lt;col&gt; &lt;value_type&gt; PRIMARY KEY;</code></td>
<td>设置为主键，唯一且不为空</td>
</tr>
<tr>
<td><code>ALTER TABLE &lt;child_table&gt; ADD FOREIGN KEY (&lt;child_col&gt;) REFERENCES &lt;parent_table&gt; (parent_col);</code></td>
<td>设置从键</td>
</tr>
<tr>
<td><code>ALTER TABLE &lt;table_name&gt; ADD INDEX &lt;index_name&gt; (col);</code></td>
<td>设置索引</td>
</tr>
</tbody></table>
<p><code>&lt;child_table&gt;</code>是从表</p>
<p><code>&lt;child_col&gt;</code>是从表中的外键列</p>
<p><code>&lt;parent_table&gt;</code>是主表</p>
<p><code>&lt;parent_col&gt;</code>是主表中的主键列</p>
<hr>
<h3 id="数据的增删改"><a href="#数据的增删改" class="headerlink" title="数据的增删改"></a>数据的增删改</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在&lt;table_name&gt;表中插入&lt;col1&gt;为&lt;value1&gt;,&lt;col2&gt;为&lt;value2&gt;,&lt;col3&gt;为&lt;value3&gt;的数据</span><br><span class="line">INSERT INTO &lt;table_name&gt; (&lt;col1&gt;, &lt;col2&gt;, &lt;col3&gt;) VALUES (&lt;value1&gt;, &lt;value2&gt;, &lt;value3&gt;);</span><br></pre></td></tr></table></figure>

<p>当<code>VALUES</code>后面的数据与列的个数对应，则可以不用写列</p>
<p>e.g. <code>INSERT INTO player (id, name, level) VALUES (1, &#39;张三&#39;, 10);</code>可以写成 <code>INSERT INTO player VALUES (1, &#39;张三&#39;, 10);</code></p>
<p>也可以只使用部分列，没有使用的列将使用默认值</p>
<p>e.g. <code>INSERT INTO player (id, name) VALUES (2, &#39;李四&#39;);</code>没有被定义的<code>level</code>将以默认值代替</p>
<p>也可以同时插入多条数据</p>
<p>e.g. <code>INSERT INTO player (id, name) VALUES (3, &#39;王五&#39;), (4, &#39;赵六&#39;);</code></p>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除&lt;table_name&gt;表中所有&lt;col&gt;列为&lt;value&gt;的数据</span><br><span class="line">DELETE FROM &lt;table_name&gt; WHERE &lt;col&gt;=&lt;value&gt;;</span><br></pre></td></tr></table></figure>

<p>e.g. <code>DELETE FROM test;</code>删除test表中所有的数据</p>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将&lt;tablue_name&gt;表的&lt;col2&gt;列为&lt;value2&gt;数据的&lt;col1&gt;赋值为&lt;value1&gt;</span><br><span class="line">UPDATE &lt;table_name&gt; SET &lt;col1&gt; = &lt;value1&gt; WHERE &lt;col2&gt; = &lt;value2&gt;;</span><br></pre></td></tr></table></figure>

<p>e.g. <code>UPDATE player SET level = 1 WHERE name = &#39;李四&#39;;</code>将李四的等级修改为1</p>
<p>不加<code>WHERE</code>限制范围就是对所有的数据修改，多个设置可以使用<code>,</code>隔开</p>
<p>e.g. <code>UPDATE player SET level=1, exp=0;</code>将所有玩家的等级修改为1，经验修改为0</p>
<hr>
<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>SELECT &lt;col&gt; FROM &lt;table&gt;;</code></td>
<td>显示<code>&lt;table&gt;</code>表中的<code>&lt;col&gt;</code>列中的数据</td>
</tr>
<tr>
<td><code>SELECT &lt;col&gt; FROM &lt;table&gt; WHERE &lt;condition&gt;;</code></td>
<td>显示<code>&lt;col&gt;</code>中符合<code>&lt;condition&gt;</code>的数据</td>
</tr>
<tr>
<td><code>SELECT &lt;col&gt; FROM &lt;table&gt; ORDER BY &lt;col&gt; ASC|DESC;</code></td>
<td>按照排序显示查询数据</td>
</tr>
</tbody></table>
<h4 id="WHERE-限制查询目标语法"><a href="#WHERE-限制查询目标语法" class="headerlink" title="WHERE &lt;condition&gt;限制查询目标语法"></a><code>WHERE &lt;condition&gt;</code>限制查询目标语法</h4><ul>
<li>可以使用&lt;,&gt;,&#x3D;</li>
<li>多个条件可以使用<code>AND</code>和<code>OR</code>连接(需要注意优先级<code>AND</code>优先于<code>OR</code>，还可以使用括号改变优先顺序)</li>
<li>使用<code>IN</code>限制范围，e.g. <code>WHERE level IN (1, 3, 5)</code>限制条件为：等级等于1,3,5</li>
<li>使用<code>WHERE &lt;col&gt; BETWEEN &lt;num1&gt; AND &lt;num2&gt;</code>限制范围，e.g. <code>WHERE level BETWEEN 1 AND 10</code>：等级在1到10之间(包括1和10)，等价于<code>WHERE level &gt;= 1 AND level &lt;= 10</code></li>
<li>使用<code>NOT</code>取反</li>
<li>使用<code>LINK</code>关键字(简化版的正则表达式)：<code>WHERE name LINK &#39;王%&#39;</code>，查找所有姓王的玩家，<code>%</code>可以代替多个字符，<code>_</code>代替一个字符</li>
<li>使用<code>REGEXP</code>关键字(正则表达式)</li>
</ul>
<blockquote>
<p><strong>注意事项</strong></p>
<p>数据库中<code>null</code> “空”不等于<code>&quot;&quot;</code> “空字符串”</p>
<ul>
<li>查找<code>null</code> ‘’空’’：<code>WHERE email is null</code></li>
<li>查找<code>&quot;&quot;</code> “空字符串”：<code>WHERE email = &#39;&#39;</code></li>
</ul>
</blockquote>
<h4 id="ORDER-BY-ASC-DESC排序语法"><a href="#ORDER-BY-ASC-DESC排序语法" class="headerlink" title="ORDER BY &lt;col&gt; ASC|DESC排序语法"></a><code>ORDER BY &lt;col&gt; ASC|DESC</code>排序语法</h4><ul>
<li><code>ASC</code>升序，默认就是升序，可省略不写</li>
<li><code>DESC</code>降序</li>
</ul>
<p>e.g. <code>ORDER BY level DES, exp ASC</code>等级降序，经验升序</p>
<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>聚合函数对某列执行一些计算，比如返回项目<code>COUNT()</code>，求和<code>SUN()</code>、平均<code>AVG()</code>、最大值<code>MAX()</code>、最小值<code>MIN()</code>等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 返回所有玩家的总人数</span><br><span class="line">SELECT COUNT(*) FROM player</span><br><span class="line">-- 返回所有玩家的平均等级</span><br><span class="line">SELECT AVG(level) FROM player</span><br></pre></td></tr></table></figure>

<h4 id="GROUP-BY分组语法"><a href="#GROUP-BY分组语法" class="headerlink" title="GROUP BY分组语法"></a><code>GROUP BY</code>分组语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将所有玩家以sex这一列分组，并展示其和</span><br><span class="line">SELECT sex, COUNT(*) FROM player GROUP BY sex;</span><br></pre></td></tr></table></figure>

<p>输出结果：男有140，女有65，NULL有3，””有1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> MySQL  localhost:33060+ ssl  game  SQL &gt; SELECT sex, count(*) FROM player GROUP BY sex;</span><br><span class="line">+------+----------+</span><br><span class="line">| sex  | count(*) |</span><br><span class="line">+------+----------+</span><br><span class="line">| 男   |      140 |</span><br><span class="line">| 女   |       65 |</span><br><span class="line">| NULL |        3 |</span><br><span class="line">|      |        1 |</span><br><span class="line">+------+----------+</span><br><span class="line">4 rows in set (0.0008 sec)</span><br></pre></td></tr></table></figure>

<p><code>GOUP BY</code>经常与<code>HAVING</code>和<code>ORDER BY</code>搭配使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 将等级分组统计数量，再显示大于4个的组</span><br><span class="line">SELECT level, COUNT(*) FROM player GROUP BY level HAVING COUNT(*) &gt; 4;</span><br><span class="line">-- 将等级分组统计数量，再显示大于4个的组，并按降序排列</span><br><span class="line">SELECT level, COUNT(*) FROM player GROUP BY level HAVING COUNT(*) &gt; 4 ORDER BY count(level) DESC;</span><br></pre></td></tr></table></figure>

<h4 id="LIMIT-num1-num2语法"><a href="#LIMIT-num1-num2语法" class="headerlink" title="LIMIT [num1] num2语法"></a><code>LIMIT [num1] num2</code>语法</h4><p>用来控制显示数量和范围</p>
<ul>
<li><code>num1</code>可选参数，偏移量。如果为4，表示从第5个数开始展示</li>
<li><code>num2</code>显示的数量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 显示前三条数据</span><br><span class="line">SELECT id, name FROM player LIMIT 3;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 张三   |</span><br><span class="line">|  2 | 赵四儿 |</span><br><span class="line">|  3 | 王五   |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 从第5条数据开始，显示三条</span><br><span class="line">SELECT id, name FROM player LIMIT 4, 3;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  5 | 范德彪 |</span><br><span class="line">|  6 | 马大帅 |</span><br><span class="line">|  7 | 王小二 |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure>



<h4 id="DISTINCT-去重"><a href="#DISTINCT-去重" class="headerlink" title="DISTINCT &lt;col&gt;去重"></a><code>DISTINCT &lt;col&gt;</code>去重</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 显示去重后的性别</span><br><span class="line">SELECT DISTINCT sex FROM player;</span><br></pre></td></tr></table></figure>

<h4 id="UNION-ALL-并集"><a href="#UNION-ALL-并集" class="headerlink" title="UNION [ALL]并集"></a><code>UNION [ALL]</code>并集</h4><p>集合A有α，集合B也有α，查询结果α默认只会显示一次</p>
<p>加上<code>ALL</code>之后，α会显示两次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询等级在1到3  或  经验在100到500之间的玩家，重复的只会显示一次</span><br><span class="line">SELECT * FROM player WHERE level BETWEEN 1 AND 3</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM player WHERE exp BETWEEN 100 AND 500;</span><br><span class="line">-- 查询等级在1到3  或  经验在100到500之间的玩家，重复的会多次选择</span><br><span class="line">SELECT * FROM player WHERE level BETWEEN 1 AND 3</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM player WHERE exp BETWEEN 100 AND 500;</span><br></pre></td></tr></table></figure>

<h4 id="INTERSECT交集"><a href="#INTERSECT交集" class="headerlink" title="INTERSECT交集"></a><code>INTERSECT</code>交集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询等级在1到3  且  经验在100到500之间的玩家</span><br><span class="line">SELECT * FROM player WHERE level BETWEEN 1 AND 3</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT * FROM player WHERE exp BETWEEN 100 AND 500;</span><br></pre></td></tr></table></figure>

<h4 id="EXCEPT差集"><a href="#EXCEPT差集" class="headerlink" title="EXCEPT差集"></a><code>EXCEPT</code>差集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询等级在1到3  且  经验 不 在100到500之间的玩家</span><br><span class="line">SELECT * FROM player WHERE level BETWEEN 1 AND 3</span><br><span class="line">EXCEPT</span><br><span class="line">SELECT * FROM player WHERE exp BETWEEN 100 AND 500;</span><br></pre></td></tr></table></figure>

<h4 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SUBSTR(name, 1, 1), COUNT(SUBSTR(name, 1, 1)) FROM player		-- 选择表和要显示的列</span><br><span class="line">GROUP BY SUBSTR(name, 1, 1)												-- 截取name：从第一个字符串开始，截取一个长度</span><br><span class="line">HAVING COUNT(SUBSTR(name, 1, 1)) &gt;= 5									-- 展示数量大于5的</span><br><span class="line">ORDER BY COUNT(SUBSTR(name, 1, 1)) DESC									-- 降序</span><br><span class="line">LIMIT 3, 4																-- 限制显示的数量，和偏移量：只显示3个，并向后偏移4位，显示5,6,7</span><br></pre></td></tr></table></figure>

<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>可以将查询结果看成一个整体，使用在大多数语法中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询大于平均等级的玩家</span><br><span class="line">SELECT * FROM player where level &gt; (SELECT AVG(level) FROM player);</span><br><span class="line">-- 查询等级与平均等级的差值</span><br><span class="line">SELECT level,</span><br><span class="line">(SELECT AVG(level) FROM player) as average,      -- 使用as关键字将这一列的名称变为average，原名称为(SELECT AVG(level) FROM player)</span><br><span class="line">level - (SELECT AVG(level) FROM player) as diff</span><br><span class="line">FROM player;</span><br><span class="line">-- 将查询结果创建成一个新的表</span><br><span class="line">CREATE TABLE player1 (SELECT id, name, level FROM player WHERE level BETWEEN 1 AND 5);</span><br><span class="line">-- 将查询的结果添加到其他表中</span><br><span class="line">INSERT INTO player1 (SELECT id, name, level FROM player WHERE level BETWEEN 5 AND 10);		-- 这样新建的表player1中就有等级1到10的玩家了</span><br><span class="line">-- 判断是否存在值，只会返回0和1</span><br><span class="line">SELECT EXISTS (SELECT * FROM player1 WHERE level &gt; 10);  -- 返回0，没有结果</span><br><span class="line">SELECT EXISTS (SELECT * FROM player1 WHERE level &gt; 5); 	 -- 返回1，有结果</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h3><p>用来查询多个表中的数据，关联的表中必须有相同的字段</p>
<p>一般会使用表的主键和外键来关联</p>
<h4 id="INNER-JOIN内连接"><a href="#INNER-JOIN内连接" class="headerlink" title="INNER JOIN内连接"></a><code>INNER JOIN</code>内连接</h4><p>只返回两个表都有的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询并显示玩家表的id和武器表的player_id相同的数据(玩家排在前面)</span><br><span class="line">SELECT * FROM player INNER JOIN equip ON player.id = equip.player_id;</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br><span class="line">|                                玩家表                           |            武器表            |</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br><span class="line">| id  | name   | sex | email               | level | exp | gold  | id | name       | player_id |</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br><span class="line">|  76 | 林克   | 男  | linke@qq.com        |    48 |  12 | 11.00 |  6 | 大师之剑   |        76 |</span><br><span class="line">| 157 | 张飞   | 男  | zhangfei@gmail.com  |    76 |  36 | 80.00 |  2 | 丈八蛇矛   |       157 |</span><br><span class="line">| 161 | 孙悟空 | 男  | sunwukong@gmail.com |    74 |  32 | 23.00 |  7 | 金箍棒     |       161 |</span><br><span class="line">| 177 | 关羽   | 男  | guanyu@gmail.com    |    19 |  60 | 36.00 |  1 | 青龙偃月刀 |       177 |</span><br><span class="line">| 186 | 曹操   | 男  | caocao@geekhour.net |    70 |  15 | 27.00 |  3 | 七星宝刀   |       186 |</span><br><span class="line">| 190 | 吕布   | 男  |                     |    77 |  43 | 31.00 |  9 | 赤兔马     |       190 |</span><br><span class="line">| 190 | 吕布   | 男  |                     |    77 |  43 | 31.00 |  8 | 方天画戟   |       190 |</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询并显示武器表的player_id和玩家表的id相同的数据(武器表排在前面)</span><br><span class="line">SELECT * FROM equip INNER JOIN player ON equip.player_id = player.id;</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br><span class="line">|           武器表             |                           玩家表                                |</span><br><span class="line">+----+------------+-----------+-----+--------+-----+---------------------+-------+-----+-------+</span><br><span class="line">| id | name       | player_id | id  | name   | sex | email               | level | exp | gold  |</span><br><span class="line">+----+------------+-----------+-----+--------+-----+---------------------+-------+-----+-------+</span><br><span class="line">|  6 | 大师之剑   |        76 |  76 | 林克   | 男  | linke@qq.com        |    48 |  12 | 11.00 |</span><br><span class="line">|  2 | 丈八蛇矛   |       157 | 157 | 张飞   | 男  | zhangfei@gmail.com  |    76 |  36 | 80.00 |</span><br><span class="line">|  7 | 金箍棒     |       161 | 161 | 孙悟空 | 男  | sunwukong@gmail.com |    74 |  32 | 23.00 |</span><br><span class="line">|  1 | 青龙偃月刀 |       177 | 177 | 关羽   | 男  | guanyu@gmail.com    |    19 |  60 | 36.00 |</span><br><span class="line">|  3 | 七星宝刀   |       186 | 186 | 曹操   | 男  | caocao@geekhour.net |    70 |  15 | 27.00 |</span><br><span class="line">|  9 | 赤兔马     |       190 | 190 | 吕布   | 男  |                     |    77 |  43 | 31.00 |</span><br><span class="line">|  8 | 方天画戟   |       190 | 190 | 吕布   | 男  |                     |    77 |  43 | 31.00 |</span><br><span class="line">+----+------------+-----------+-----+--------+-----+---------------------+-------+-----+-------+</span><br></pre></td></tr></table></figure>



<h4 id="LEFT-INJO左连接"><a href="#LEFT-INJO左连接" class="headerlink" title="LEFT INJO左连接"></a><code>LEFT INJO</code>左连接</h4><p>返回左表中所有的数据，和右表中匹配的数据（右表中没有的数据用NULL填充）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 显示player表，并将equip表依据player.id = equip.player_id挂载在后面</span><br><span class="line">SELECT * FROM player LEFT JOIN equip ON player.id = equip.player_id;</span><br></pre></td></tr></table></figure>

<p>数据较多就不显示例子了，与内连接第一个例子结果类似</p>
<h4 id="RIGHT-INJO右连接"><a href="#RIGHT-INJO右连接" class="headerlink" title="RIGHT INJO右连接"></a><code>RIGHT INJO</code>右连接</h4><p>返回右表中所有的数据，和左表中匹配的数据（左表中没有的数据用NULL填充）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 显示equip表，并将player表依据player.id = equip.player_id挂载在后面</span><br><span class="line">SELECT * FROM player RIGHT join equip on player.id = equip.player_id;</span><br><span class="line">+------+--------+------+---------------------+-------+------+-------+----+------------+-----------+</span><br><span class="line">| id   | name   | sex  | email               | level | exp  | gold  | id | name       | player_id |</span><br><span class="line">+------+--------+------+---------------------+-------+------+-------+----+------------+-----------+</span><br><span class="line">|  177 | 关羽   | 男   | guanyu@gmail.com    |    19 |   60 | 36.00 |  1 | 青龙偃月刀 |       177 |</span><br><span class="line">|  157 | 张飞   | 男   | zhangfei@gmail.com  |    76 |   36 | 80.00 |  2 | 丈八蛇矛   |       157 |</span><br><span class="line">|  186 | 曹操   | 男   | caocao@geekhour.net |    70 |   15 | 27.00 |  3 | 七星宝刀   |       186 |</span><br><span class="line">| NULL | NULL   | NULL | NULL                |  NULL | NULL |  NULL |  4 | 长剑       |      NULL |</span><br><span class="line">| NULL | NULL   | NULL | NULL                |  NULL | NULL |  NULL |  5 | 铁盾       |      NULL |</span><br><span class="line">|   76 | 林克   | 男   | linke@qq.com        |    48 |   12 | 11.00 |  6 | 大师之剑   |        76 |</span><br><span class="line">|  161 | 孙悟空 | 男   | sunwukong@gmail.com |    74 |   32 | 23.00 |  7 | 金箍棒     |       161 |</span><br><span class="line">|  190 | 吕布   | 男   |                     |    77 |   43 | 31.00 |  8 | 方天画戟   |       190 |</span><br><span class="line">|  190 | 吕布   | 男   |                     |    77 |   43 | 31.00 |  9 | 赤兔马     |       190 |</span><br><span class="line">+------+--------+------+---------------------+-------+------+-------+----+------------+-----------+</span><br></pre></td></tr></table></figure>

<h4 id="WHERE关联"><a href="#WHERE关联" class="headerlink" title="WHERE关联"></a><code>WHERE</code>关联</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 在player表和equip表中查询并显示player.id = equip.player_id相等的数据</span><br><span class="line">SELECT * FROM player, equip WHERE player.id = equip.player_id;</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br><span class="line">| id  | name   | sex | email               | level | exp | gold  | id | name       | player_id |</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br><span class="line">|  76 | 林克   | 男  | linke@qq.com        |    48 |  12 | 11.00 |  6 | 大师之剑   |        76 |</span><br><span class="line">| 157 | 张飞   | 男  | zhangfei@gmail.com  |    76 |  36 | 80.00 |  2 | 丈八蛇矛   |       157 |</span><br><span class="line">| 161 | 孙悟空 | 男  | sunwukong@gmail.com |    74 |  32 | 23.00 |  7 | 金箍棒     |       161 |</span><br><span class="line">| 177 | 关羽   | 男  | guanyu@gmail.com    |    19 |  60 | 36.00 |  1 | 青龙偃月刀 |       177 |</span><br><span class="line">| 186 | 曹操   | 男  | caocao@geekhour.net |    70 |  15 | 27.00 |  3 | 七星宝刀   |       186 |</span><br><span class="line">| 190 | 吕布   | 男  |                     |    77 |  43 | 31.00 |  9 | 赤兔马     |       190 |</span><br><span class="line">| 190 | 吕布   | 男  |                     |    77 |  43 | 31.00 |  8 | 方天画戟   |       190 |</span><br><span class="line">+-----+--------+-----+---------------------+-------+-----+-------+----+------------+-----------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 可以给表名赋上别名，和上面的结果是一样的</span><br><span class="line">SELECT * FROM player p, equip e WHERE p.id = e.player_id;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>是一种用来提高查询效率的数据结构，可以帮助我们快速的定位到我们想要的数据</p>
<p>如果没有索引的话，就只能从头开始遍历所有的数据，直到找到满足条件的数据为止。当数据非常少的时候没有什么问题，但是当数据量非常大的时候，查询效率就会直线下降，索引就是为了解决这个问题而产生的</p>
<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQE|FULLTEXT|SPATYAL] INDEX &lt;index_name&gt; ON &lt;table_name(index_col_name,...)&gt;</span><br></pre></td></tr></table></figure>

<p><code>[UNIQE|FULLTEXT|SPATYAL]</code>:分别代表唯一索引、全文索引、空间索引。可不写，默认为唯一索引</p>
<p><code>&lt;index_name&gt;</code>:索引名称</p>
<p><code>&lt;table_name(index_col_name,...)&gt;</code>:给指定的表的指定列创建索引</p>
<p>e.g.:<code>CREATE INDEX email_index ON player(name)</code></p>
<p>在创建表的同时添加索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE player (</span><br><span class="line">	id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    email VARCHAR(50) NOT NULL,</span><br><span class="line">    INDEX name_index (name)					-- 给name列创建索引</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM &lt;talbe_name&gt;</span><br><span class="line"># 输出：</span><br><span class="line">+--------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">| Table  | Non_unique | Key_name   | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |</span><br><span class="line">+--------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line">| player |          1 | name_index |            1 | name        | A         |         209 |     NULL | NULL   | YES  | BTREE      |         |               | YES     | NULL       |</span><br><span class="line">+--------+------------+------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h4><p>上面使用<code>CREATE INDEX email_index ON player(name);</code>给player的name添加了索引</p>
<p>使用方法：直接查找这个表的这个列<code>SELECT * FROM player WHERE name like &quot;王%&quot;;</code>就能很快速的查找出姓王的人了</p>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p><code>DROP INDEX &lt;index_name&gt; ON &lt;table_name&gt;</code>;</p>
<p>e.g.: <code>DROP INDEX name_index ON player;</code></p>
<p>还能使用修改表结构的方式添加索引：<code>ALTER TALBE player ADD INDEX name_index (name);</code></p>
<hr>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>范围(有符号)</th>
<th>范围(无符号)</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1 Bytes</td>
<td>(-128，127)</td>
<td>(0，255)</td>
<td>小整数值</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 Bytes</td>
<td>(-32,768，32,767)</td>
<td>(0，65 535)</td>
<td>大整数值</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 Bytes</td>
<td>(-8,388,608，8 388,607)</td>
<td>(0，16 777 215)</td>
<td>大整数值</td>
</tr>
<tr>
<td>INT或INTEGER</td>
<td>4 Bytes</td>
<td>(-2,147,483,648，2,147,483,647)</td>
<td>(0，4 294 967 295)</td>
<td>大整数值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 Bytes</td>
<td>(-9,223,372,036,854,775,808，9,223,372,036,854,775,807)</td>
<td>(0，18 446 744 073 709 551 615)</td>
<td>极大整数值</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4 Bytes</td>
<td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td>
<td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td>
<td>单精度 浮点数值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8 Bytes</td>
<td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td>
<td>双精度 浮点数值</td>
</tr>
<tr>
<td>DECIMAL</td>
<td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td>依赖于M和D的值</td>
<td>依赖于M和D的值</td>
<td>小数值</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【Unity】上下文管理器</title>
    <url>/2023/09/12/unity-%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h3 id="StreamingAssets方法"><a href="#StreamingAssets方法" class="headerlink" title="StreamingAssets方法"></a>StreamingAssets方法</h3><p>这是一个<strong>只读</strong>、<strong>不可写</strong>的目录；该文件夹的资源会保持原始格式（比如图片不会被引擎进行纹理压缩），dll文件或脚本放在该文件夹下也不会参与编译</p>
<p>官方推荐使用<code>Application.streamingAssetsPath</code>来获取该文件夹的实际位置，其可规避平台差异：<br>对于UnityEditor，windows平台，其等价于：<code>Application.dataPath + &quot;/StreamingAssets&quot;</code><br>对于macOS，其等价于：<code>Application.dataPath+&quot;/Resources/Data/StreamingAssets&quot;</code><br>对于ios平台，其等价于：<code>Application.dataPath + &quot;/Raw&quot;;</code><br>对于android平台，其等价于：<code>&quot;jar:file://&quot; + Application.dataPath + &quot;!/assets/&quot;;</code></p>
<h4 id="基础使用方法："><a href="#基础使用方法：" class="headerlink" title="基础使用方法："></a>基础使用方法：</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置路径</span></span><br><span class="line"><span class="built_in">string</span> jsonPath = Application.streamingAssetsPath + <span class="string">@&quot;/JSON/IP.json&quot;</span>;</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="built_in">string</span> jsonStr = System.IO.File.ReadAllText(jsonPath, Encoding.UTF8);</span><br></pre></td></tr></table></figure>

<p>对于非Android和WebGL平台，支持File或者Stream的读取操作<br>但是对于Android和WebGL平台上无法访问StreamingAssets文件夹。在WebGL上没有文件访问权。Android使用压缩的.apk文件。这些平台无法返回URL。<br>解决方案：</p>
<ol>
<li>把StreamingAssets下的文件写入persistentDataPath，后续的读取和写入都在persistentDataPath进行</li>
<li>使用UnityWebRequest对StreamingAssets下的文件进行读取</li>
</ol>
<h4 id="使用UnityWebRequest读取"><a href="#使用UnityWebRequest读取" class="headerlink" title="使用UnityWebRequest读取"></a>使用UnityWebRequest读取</h4><p>UnityWebRequest读取文件需要传入文件的URL，StreamingAssets目录不同平台对应的URL是不一样的，如下：</p>
<ul>
<li>Window平台 <code>file:///D:/DATA/StreamingAssets/data.json</code></li>
<li>WebGL平台 <code>http://localhost/StreamingAssets/data.json</code></li>
<li>Android平台 <code>jar:file:///data/app/xxx!/assets/data.json</code></li>
<li>IOS平台 <code>Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data/Raw</code></li>
</ul>
<p>这时候最好通过构造Uri()的方式来规避平台的差异，获得真正的请求URL。如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="keyword">new</span> System.Uri(Path.Combine(Application.streamingAssetsPath, <span class="string">&quot;data.json&quot;</span>)).AbsoluteUri;</span><br></pre></td></tr></table></figure>

<p>方法<code>Path.Combine(Path1, Path2)</code>在检测到path1不是以分隔符结尾的话，会自动补充分隔符</p>
<hr>
<h3 id="PersistentDataPath方法"><a href="#PersistentDataPath方法" class="headerlink" title="PersistentDataPath方法"></a>PersistentDataPath方法</h3><p>该方法下的文件<strong>可读</strong>、<strong>可写</strong></p>
<p>使用这个方法生成的文件所在路径为：<code>C:\Users\Administrator\AppData\LocalLow\DefaultCompany\项目名</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路径</span></span><br><span class="line"><span class="built_in">string</span> filePath = Path.Combine(Application.persistentDataPath, <span class="string">&quot;config.json&quot;</span>);</span><br><span class="line"><span class="comment">// 判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!File.Exists(filePath))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span>		<span class="comment">//如果文件不存在，创建一个新文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建文件并写入内容</span></span><br><span class="line">        File.WriteAllText(filePath, <span class="string">&quot;&#123; \&quot;settingCycle\&quot;, 999 &#125;&quot;</span>));</span><br><span class="line">        Debug.Log(<span class="string">&quot;Remark file created successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (System.Exception ex)		<span class="comment">// 如果创建失败会捕获错误</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.LogError(<span class="string">&quot;Failed to create remark file: &quot;</span> + ex.Message);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有了前面的兜底创建文件的步骤，这一步就可以直接读取该路径下的文件了</span></span><br><span class="line"><span class="built_in">string</span> jsonContent = File.ReadAllText(filePath);</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="Resources方法"><a href="#Resources方法" class="headerlink" title="Resources方法"></a>Resources方法</h3><p>是存储资源的文件的方法，如音频、视频、预制体等<br>在读取文件时可以不加后缀<br>只可读<br>打包后文件夹内容会被加密，无法直接看到该文件夹下的内容</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取Resources文件夹下的内容</span></span><br><span class="line">prefab = UnityEngine.Resources.Load&lt;GameObject&gt;(<span class="string">&quot;BayWindow/prefabObject&quot;</span>);</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><p>这种方法可以将文件存储在与Assets同级路径下<br>可以读取文本文件和资源文件</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先制定好根路径</span></span><br><span class="line"><span class="built_in">string</span> DynamicParent = Application.dataPath + <span class="string">&quot;/../资源/&quot;</span>;</span><br><span class="line"><span class="comment">// 设置路径</span></span><br><span class="line"><span class="built_in">string</span> descriptionPath = <span class="string">&quot;文本文件/start.text&quot;</span>;</span><br><span class="line"><span class="comment">// 创建文件，后立刻释放相关资源</span></span><br><span class="line">File.Create(DynamicParent + descriptionPath).Dispose();</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="built_in">string</span> content = File.ReadAllText(DynamicParent + descriptionPath)</span><br></pre></td></tr></table></figure>

<p>拓展：在创建文件前可以先创建该文件的父级文件夹</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件的父级文件夹路径</span></span><br><span class="line">parentPath = System.IO.Path.GetDirectoryName(DynamicParent + descriptionPath);</span><br><span class="line"><span class="comment">// 判断父级文件夹是否存在，如果不存在就创建</span></span><br><span class="line"><span class="keyword">if</span> (!Directory.Exists(parentPath))</span><br><span class="line">    Directory.CreateDirectory(parentPath)</span><br><span class="line"><span class="comment">// 判断该文件是否存在，如果不存在就创建</span></span><br><span class="line"><span class="keyword">if</span> (!File.Exists(DynamicParent + descriptionPath))</span><br><span class="line">    File.Create(DynamicParent + descriptionPath).Dispose();</span><br></pre></td></tr></table></figure>

<p><code>Path.GetDirectoryName(path)</code>是获取path这个路径的父文件路径，具体用法如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> filePath = <span class="string">@&quot;C:\MyDir\MySubDir\myfile.ext&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> directoryName;</span><br><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (filePath != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    directoryName = Path.GetDirectoryName(filePath);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;GetDirectoryName(&#x27;&#123;0&#125;&#x27;) returns &#x27;&#123;1&#125;&#x27;&quot;</span>,</span><br><span class="line">        filePath, directoryName);</span><br><span class="line">    filePath = directoryName;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        filePath = directoryName + <span class="string">@&quot;\&quot;</span>;  <span class="comment">// this will preserve the previous path</span></span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">This code produces the following output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">GetDirectoryName(&#x27;C:\MyDir\MySubDir\myfile.ext&#x27;) returns &#x27;C:\MyDir\MySubDir&#x27;</span></span><br><span class="line"><span class="comment">GetDirectoryName(&#x27;C:\MyDir\MySubDir&#x27;) returns &#x27;C:\MyDir&#x27;</span></span><br><span class="line"><span class="comment">GetDirectoryName(&#x27;C:\MyDir\&#x27;) returns &#x27;C:\MyDir&#x27;</span></span><br><span class="line"><span class="comment">GetDirectoryName(&#x27;C:\MyDir&#x27;) returns &#x27;C:\&#x27;</span></span><br><span class="line"><span class="comment">GetDirectoryName(&#x27;C:\&#x27;) returns &#x27;&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<hr>
<p>参考：</p>
<p><a href="https://blog.csdn.net/iningwei/article/details/89097130">详解Unity中的StreamingAssets文件夹</a></p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>【Unity】【CSharp】事件和委托</title>
    <url>/2023/08/12/unity-%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>委托可以把一个方法代入另一个方法，相当于指向函数的指针，换句话说，委托相当于一个函数指针</p>
<p>总的来说，委托是一个类，该类内部维护着一个字段，指向一个方法。</p>
<p>委托的声明：<code>public delegate void DoDelegate();</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">$&quot;valueStr=<span class="subst">&#123;sender&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">DoDelegate</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化委托——只是实例化，并不会执行</span></span><br><span class="line">DoDelegate doDelegate = <span class="keyword">new</span> DoDelegate(Test);</span><br><span class="line"><span class="built_in">object</span> sender = <span class="number">888</span>;</span><br><span class="line">EventArgs e = <span class="keyword">new</span> EventArgs();</span><br><span class="line"><span class="comment">// 执行委托的两种方法</span></span><br><span class="line"><span class="comment">// 方法一:</span></span><br><span class="line">doDelegate?.Invoke(sender, e);</span><br><span class="line"><span class="comment">// 方法二:</span></span><br><span class="line">doDelegate(sender, e);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件相当于保存委托的数组</p>
<p>事件是基于委托的，为委托提供一个订阅或发布的机制。事件是一种特殊的委托，调用事件和委托是一样的。</p>
<p>事件可以被看作是委托类型的一个变量，通过事件注册、取消多个委托和方法。</p>
<p>public event 委托类型 事件名称；<br>如：<code>public event DoDelegate DoEvent;</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">$&quot;valueStr=<span class="subst">&#123;sender&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">DoDelegate</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span>;</span><br><span class="line"><span class="comment">// 定义事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> DODelegate DoEvent;</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> sender = <span class="number">888</span>;</span><br><span class="line">EventArgs e = <span class="keyword">new</span> EventArgs();</span><br><span class="line"><span class="comment">// 两种用法</span></span><br><span class="line"><span class="comment">// 1.给事件注册委托</span></span><br><span class="line"><span class="comment">// 2.给事件直接注册方法</span></span><br><span class="line"><span class="comment">// 用法一（给事件注册委托）：</span></span><br><span class="line"><span class="comment">// 给事件注册委托，可注册多个委托</span></span><br><span class="line">DoEvent += <span class="keyword">new</span> DoDelegate(doDelegate);</span><br><span class="line"><span class="comment">// 执行事件内所有的委托</span></span><br><span class="line">DoEvent(sender, e);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法二（给事件注册方法）：</span></span><br><span class="line"><span class="comment">// 给事件注册方法，可注册多个方法</span></span><br><span class="line">DoEvent += Test;</span><br><span class="line"><span class="comment">// 执行事件内所有的方法</span></span><br><span class="line">DoEvent(sender, e);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Unity</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>【Unity】【设计模式】函数的实现与与调用分离</title>
    <url>/2023/08/11/unity-%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%B8%8E%E8%B0%83%E7%94%A8%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><img src="/../images/unity/函数的实现与与调用分离.png"></img></p>
<span id="more"></span>

<hr>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><ul>
<li>每个物体需要挂载一个。因为内容是一样的，所以可以通过脚本的方式自动挂载</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseDown</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MouseManager.Instance.ClickObj(gameObject.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h3><ol>
<li><p>设置为单例脚本</p>
</li>
<li><p>通过‘名称’获取所有需要管理的物体</p>
</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取物体并存储下来&#123; 物体名称：物体属性 &#125;，物体属性可以重新写一个类，来存储这个物体所有需要用到的属性</span></span><br><span class="line"><span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, MouseInfo&gt; mouseDownDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, MouseInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MouseListener[] mouseListeners = transform.GetCompoentsInChildren&lt;MouseListener&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (MouseListener item <span class="keyword">in</span> mouseListeners)</span><br><span class="line">    &#123;</span><br><span class="line">        AddClickDic(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddClickDic</span>(<span class="params">MouseListener mouseListener</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> clickObjName = mouseListener.gameObject.name;</span><br><span class="line">    <span class="comment">// 先判断字典中是否已经有该物体，如果没有就将这个物体添加到字典中，如果已经有了就退出</span></span><br><span class="line">    MouseInfo mouseInfo = <span class="keyword">new</span> MouseInfo()&#123;</span><br><span class="line">        <span class="comment">// 将物体mouseListener的属性赋给mouseInfo的元素</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 将物体添加到字典中</span></span><br><span class="line">    mouseDownDic.Add(clickObjName, mouseInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ... 其他属性(在AddclickDic中添加)</span></span><br><span class="line">    <span class="keyword">public</span> UnityAction&lt;<span class="built_in">string</span>&gt; action;		<span class="comment">// 在RegisterClick中添加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>初始化物体，并注册事件</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegisterClick</span>(<span class="params"><span class="built_in">string</span> clickObjName, UnityAction&lt;<span class="built_in">string</span>&gt; clickCallback</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先判断字典中是否有这个物体，如果有才执行注册，如果没有就退出</span></span><br><span class="line">    mouseDownDic[clickObjName].action += clickCallback;</span><br><span class="line">    <span class="comment">// 初始化物体，比如激活触发盒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在AddClickDic函数中初始化物体，但是一般不这么做，原因有二：</p>
<ul>
<li><p>这个函数只用来添加属性，不干其他的</p>
</li>
<li><p>RegisterClick函数是在AddClickDic函数后面执行的，如果在AddClickDic中初始化了，在RegisterClick中再初始化会覆盖AddClickDic中的初始化</p>
</li>
</ul>
<p>那可能你又要问：为什么不在AddClickDic的时候就将物体初始化好，并且注册事件呢</p>
<p>答：因为这两个函数的作用位置不同</p>
<ul>
<li>AddClickDic是在Manager中先存储所有的物体信息，要先执行</li>
<li>RegisterClick则是在每个物体自己的脚本中获取到Manager的字典，然后将物体各自的事件注册到字典对应的值中，要后执行</li>
</ul>
<ol start="4">
<li>写一个通过‘名称’调用指定物体方法的函数</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClickObj</span>(<span class="params"><span class="built_in">string</span> objName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 调用物体的方法</span></span><br><span class="line">    mouseDownDic[objName].action?.invoke(objName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h3><ol>
<li>实现每个物体各自的方法</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Red_Fly</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;红色_起飞&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>注册方法</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记得在start中调用</span></span><br><span class="line"><span class="comment">// 注意：这里涉及到一个函数执行顺序的问题</span></span><br><span class="line"><span class="comment">// 在Manager中AddClickDic是在OnEnable中执行的</span></span><br><span class="line"><span class="comment">// 而RegisterClick需要在AddClickDic后执行，所以在start中调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegisterFunc</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MouseManager.Instance.RegisterClick(gameObject.name, () =&gt; Red_Fly());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转载B站：<a href="https://www.bilibili.com/video/BV1zk4y1g7RG/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=56c4342823eb8458689563e7f2be4f99">【Unity】编程思想小分享：函数的实现与调用如何分离</a></p>
]]></content>
      <tags>
        <tag>Unity</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Unity】【CSharp】多线程</title>
    <url>/2023/09/18/unity-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Task和Thread的区别"><a href="#Task和Thread的区别" class="headerlink" title="Task和Thread的区别"></a>Task和Thread的区别</h3><ul>
<li><p>基于不同的 .NET 框架：Thread 是基于 Windows 操作系统提供的 API 实现，而 Task 则是基于 .NET框架提供的 TPL（Task Parallel Library）实现。</p>
</li>
<li><p>默认执行线程池：Thread 默认使用前台线程，而 Task 默认使用后台线程。这意味着，Thread 会阻塞主线程，而 Task不会。</p>
</li>
<li><p>异步执行：Task 支持异步执行，而 Thread 不支持。这意味着，在使用 Task 时，可以通过 await 和 async关键字轻松实现异步编程，而 Thread 则需要手动管理线程的启动和等待。</p>
</li>
<li><p>异常处理：Task 提供了更好的异常处理机制，可以将异常传递给调用方，而 Thread 则需要在每个线程中处理异常。</p>
</li>
<li><p>任务调度器：Task 提供了任务调度器（TaskScheduler），可以控制任务的并发性和调度方式，而 Thread 则没有这个功能。</p>
</li>
<li><p>返回值：Task 可以有返回值，而 Thread 没有。这是因为 Task 是基于 TPL 实现的，可以利用 .NET框架提供的并发编程模型来实现任务之间的依赖和调度。</p>
</li>
</ul>
<h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><h4 id="Task和Task的创建"><a href="#Task和Task的创建" class="headerlink" title="Task和Task&lt;T&gt;的创建"></a><code>Task</code>和<code>Task&lt;T&gt;</code>的创建</h4><h5 id="Task的创建"><a href="#Task的创建" class="headerlink" title="Task的创建"></a>Task的创建</h5><p>使用<code>Task</code>的构造函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Task task = <span class="keyword">new</span> Task(() =&gt; &#123;</span><br><span class="line">	<span class="comment">// 异步操作的代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用<code>Task.Run</code>的构造函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Task task = Task.Run(() =&gt; &#123;</span><br><span class="line">    <span class="comment">// 异步操作的代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="Task的创建-1"><a href="#Task的创建-1" class="headerlink" title="Task&lt;T&gt;的创建"></a><code>Task&lt;T&gt;</code>的创建</h5><p><code>Task&lt;T&gt;</code>与会返回一个类型为T的结果</p>
<p>使用<code>Task</code>的构造函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Task&lt;<span class="built_in">int</span>&gt; task = <span class="keyword">new</span> Task&lt;<span class="built_in">int</span>&gt;(() =&gt;&#123;</span><br><span class="line">    <span class="comment">// 异步操作的代码，返回int类型的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用<code>Task.Run</code>的构造函数</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Task&lt;<span class="built_in">int</span>&gt; task = Task.Run(() =&gt; &#123;</span><br><span class="line">    <span class="comment">// 异步操作的代码，返回int类型的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="启动和等待Task和Task"><a href="#启动和等待Task和Task" class="headerlink" title="启动和等待Task和Task&lt;T&gt;"></a>启动和等待<code>Task</code>和<code>Task&lt;T&gt;</code></h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>使用<code>start</code>方法启动</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">task.Start();</span><br></pre></td></tr></table></figure>

<h5 id="使用Wait-阻塞等待"><a href="#使用Wait-阻塞等待" class="headerlink" title="使用Wait()阻塞等待"></a>使用<code>Wait()</code>阻塞等待</h5><p>直接控制<code>Task</code>，实现异步等待任务的完成<br>会阻塞主线程，类似于<code>thread1.Join()</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">task.Wait();	<span class="comment">// 阻塞当前线程，等待任务完成</span></span><br><span class="line"><span class="built_in">int</span> result = task.Result;  <span class="comment">// 阻塞当前线程，等待任务完成，并获取结果</span></span><br><span class="line"></span><br><span class="line">Task.WaitAll(<span class="keyword">new</span> Task[]&#123; task1, task2 &#125;);		<span class="comment">// 等待所有的task都执行完成再解除阻塞</span></span><br><span class="line">Task.WaitAny(<span class="keyword">new</span> Task[]&#123; task1, task2 &#125;);		<span class="comment">// 只要有一个task执行完毕就解除阻塞</span></span><br></pre></td></tr></table></figure>

<h5 id="使用WhenAll和WhenAny控制线程"><a href="#使用WhenAll和WhenAny控制线程" class="headerlink" title="使用WhenAll和WhenAny控制线程"></a>使用<code>WhenAll</code>和<code>WhenAny</code>控制线程</h5><p>不会阻塞主线程</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Task.WhenAll(task1, task2).ContinueWith((t) =&gt; &#123; Console.Writeline(<span class="string">&quot;执行异步代码&quot;</span>); &#125;);	<span class="comment">// 当task1和task2执行完毕后，再执行后续代码</span></span><br><span class="line">Task.WhenAny(task1, task2).ContinueWith((t) =&gt; &#123; Console.Writeline(<span class="string">&quot;执行异步代码&quot;</span>); &#125;);	<span class="comment">// 只要有一个执行完毕，就执行后续代码</span></span><br></pre></td></tr></table></figure>

<h5 id="使用await等待Task和Task"><a href="#使用await等待Task和Task" class="headerlink" title="使用await等待Task和Task&lt;T&gt;"></a>使用<code>await</code>等待<code>Task</code>和<code>Task&lt;T&gt;</code></h5><p>在异步代码中使用<code>await</code>等待其他的任务完成（为.net5.0推出的方法）<br>不会阻塞主线程</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AsyncTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">            t().Start();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Task <span class="title">t</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="keyword">async</span> () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;开始执行t&quot;</span>);</span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">2000</span>);			<span class="comment">// 等待两秒，模拟一个异步操作</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;结束执行t&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">主线程开始</span><br><span class="line">主线程结束</span><br><span class="line">开始执行t</span><br><span class="line">结束执行t</span><br></pre></td></tr></table></figure>

<h5 id="三个等待的区别"><a href="#三个等待的区别" class="headerlink" title="三个等待的区别"></a>三个等待的区别</h5><ul>
<li><code>Wait()</code>针对线程操作，会阻塞主线程</li>
<li><code>WhenAll</code>针对线程操作，不会阻塞主线程</li>
<li><code>await</code>在线程中针对其他线程操作，不会阻塞主线程</li>
</ul>
<hr>
<h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(A);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(B);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;我是A函数1&quot;</span>);</span><br><span class="line">    Debug.Log(<span class="string">&quot;我是A函数2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(<span class="string">&quot;我是B函数1&quot;</span>);</span><br><span class="line">    Debug.Log(<span class="string">&quot;我是B函数2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的输出结果是不可控的，可能先执行A，也可能先执行B，这个是操作系统根据CPU自动计算出来的。<br>而且A和B是会嵌套交叉执行的</p>
<p>如何让程序先执行A，执行完A之后在执行B；或者先执行完B再执行A：使用lock关键字</p>
<h3 id="lock关键字"><a href="#lock关键字" class="headerlink" title="lock关键字"></a>lock关键字</h3><p>可以通过lock关键字来控制A和B的执行顺序。使用同一个lock参数的代码，程序会等待前面的代码执行完之后再执行后面的</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> Object o = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(A);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(B);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(C);</span><br><span class="line">    t3.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">A</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lock</span>(o)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;我是A函数1&quot;</span>);</span><br><span class="line">        Debug.Log(<span class="string">&quot;我是A函数2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">B</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lock</span>(o)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Thread.Sleep(1000);   // 暂停1秒</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;我是B函数1&quot;</span>);</span><br><span class="line">        Debug.Log(<span class="string">&quot;我是B函数2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">C</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    DEbug.Log(<span class="string">&quot;我是随机函数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时可能会先执行A，执行完A后再执行B；也有可能先执行B，执行完B之后再执行A。C函数没有被锁住，所以他能出现在任意位置。</p>
<p>补充：这里的o是Object类（基类）。所以，lock的参数可以是任意的类</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>在unity中将子线程的代码转移到主线程中执行</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainThreadDispatcher</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainThreadDispatcher instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Action&gt; actionQueue = <span class="keyword">new</span> Queue&lt;Action&gt;();		<span class="comment">// 初始化一个队列:先进先出的一个数据结构</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (actionQueue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (actionQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Action action = actionQueue.Dequeue();		<span class="comment">// 取出队列中的一个函数，并执行</span></span><br><span class="line">                action.Invoke();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RunOnMainThread</span>(<span class="params">Action action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (instance.actionQueue)		<span class="comment">// 如果有其他的代码（包括自己）使用了lock(instance.actionQueue)，则会等待前面的执行完再执行自己</span></span><br><span class="line">        &#123;</span><br><span class="line">            instance.actionQueue.Enqueue(action);		<span class="comment">// 将传进来的action函数插入到队列中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在其他函数中可以通过调用<code>RunOnMainThread()</code>函数将方法转移到主线程上执行<br>常用与数据请求上，接收到的数据一般都是在子线程上。但是在unity的子线程中无法访问transform属性等，故需要转移到主线程上执行</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">RunOnMainThread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 转移到主线程上执行代码</span></span><br><span class="line">    textValue.text = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Unity</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>【Unity】【CSharp】【设计模式】Unity设计模式</title>
    <url>/2023/08/15/unity-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="懒汉模式："><a href="#懒汉模式：" class="headerlink" title="懒汉模式："></a>懒汉模式：</h4><p>指在第一次访问单例对象时才创建实例</p>
<p>特点是在多线程环境下可能会存在线程安全问题，因为多个线程可能在同一时间检查到实例不存在，从而导致多个实例被创建</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitySingleton</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span></span><br><span class="line">    <span class="keyword">where</span> <span class="title">T</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T _instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _instance = FindObjectOfType(<span class="keyword">typeof</span>(T)) <span class="keyword">as</span> T;</span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    GameObject obj = <span class="keyword">new</span> GameObject();</span><br><span class="line">                    _instance = obj.AddComponent&lt;T&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="饿汉模式："><a href="#饿汉模式：" class="headerlink" title="饿汉模式："></a>饿汉模式：</h4><p>指在类加载时就创建实例，无论是否需要</p>
<p>这样就可以避免多线程环境下的线程安全问题，但可能会增加启动时间和内存消耗</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span>, <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(<span class="keyword">this</span>.gameObject);</span><br><span class="line">            Debug.LogError(<span class="string">&quot;单例只允许存在一个，架构存在错误，本物体&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;  已删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>使用委托和事件实现</p>
<p>下面的方法使用的是委托和列表的方式，原理是一样的</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventManager</span> : <span class="title">Singleton</span>&lt;<span class="title">EventManager</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">EventCallBack</span>(<span class="params"><span class="built_in">object</span> param</span>)</span>;<span class="comment">// 事件回调函数</span></span><br><span class="line">    <span class="comment">// 事件字典，键可以用枚举来实现</span></span><br><span class="line">    Dictionary&lt;<span class="built_in">int</span>, List&lt;EventCallBack&gt;&gt; mDictEvent = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, List&lt;EventCallBack&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 添加事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddEvent</span>(<span class="params"><span class="built_in">int</span> eventId, EventCallBack callBack</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!mDictEvent.ContainsKey(eventId))</span><br><span class="line">        &#123;</span><br><span class="line">            mDictEvent.Add(eventId,<span class="keyword">new</span> List&lt;EventCallBack&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!mDictEvent[eventId].Contains(callBack))</span><br><span class="line">        &#123;</span><br><span class="line">            mDictEvent[eventId].Add(callBack);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogWarning(<span class="string">&quot;Repeat Add Event CallBack，EventId = &quot;</span> + eventId + <span class="string">&quot;,CallBack = &quot;</span> + callBack.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除事件监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DelEvent</span>(<span class="params"><span class="built_in">int</span> eventId, EventCallBack callBack</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!mDictEvent.ContainsKey(eventId))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!mDictEvent[eventId].Contains(callBack))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mDictEvent[eventId].Remove(callBack);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果回调都被移除了 那么key也从字典移除</span></span><br><span class="line">        <span class="keyword">if</span> (mDictEvent[eventId].Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mDictEvent.Remove(eventId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 通知事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NotifyEvent</span>(<span class="params"><span class="built_in">int</span> eventId,<span class="built_in">object</span> param</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mDictEvent.ContainsKey(eventId))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> callback <span class="keyword">in</span> mDictEvent[eventId])</span><br><span class="line">            &#123;</span><br><span class="line">                callback(param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>把公共方法抽象成组件，需要用到这个方法的对象可以将对应的组件添加到该对象上</p>
<p>比较简单，就不举例了</p>
<hr>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>适用场景：实现撤销功能</p>
<p>大致由三部分组成：命令类、命令管理器类、输入类</p>
<p>命令类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 命令基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CommandBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 执行</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 撤销</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveForWard</span> : <span class="title">CommandBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject _player;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MoveForWard</span>(<span class="params">GameObject player</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _player = player;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _player.transform.Translate(Vector3.forward);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _player.transform.Translate(Vector3.back);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveLeft</span> : <span class="title">CommandBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject _player;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MoveLeft</span>(<span class="params">GameObject player</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _player = player;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _player.transform.Translate(Vector3.left);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _player.transform.Translate(Vector3.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命令管理器类：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommandManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommandManager Instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;CommandBase&gt; _commandList = <span class="keyword">new</span> List&lt;CommandBase&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Instance) Destroy(Instance);</span><br><span class="line">        <span class="keyword">else</span> Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddCommands</span>(<span class="params">CommandBase command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _commandList.Add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">UndoStart</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _commandList.Reverse();</span><br><span class="line">        <span class="keyword">foreach</span> (CommandBase command <span class="keyword">in</span> _commandList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">.2</span>f</span>)</span>;</span><br><span class="line">            command.Undo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _commandList.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入类：</p>
<p>监听按键点击，只负责接受输入，具体的操作放在命令的Execute方法中，这样实现解耦<br>点击W或A键时执行命令，并把命令添加的管理器的列表中，点击B键撤销之前所有的命令</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InputHandler</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> MoveForWard _moveForward;</span><br><span class="line">    <span class="keyword">private</span> MoveLeft _moveLeft;</span><br><span class="line">    <span class="keyword">private</span> GameObject _playerCube;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _playerCube = GameObject.CreatePrimitive(PrimitiveType.Cube);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.W))</span><br><span class="line">        &#123;</span><br><span class="line">            _moveForward = <span class="keyword">new</span> MoveForWard(_playerCube);</span><br><span class="line">            _moveForward.Execute();</span><br><span class="line">            CommandManager.Instance.AddCommands(_moveForward);<span class="comment">//顺序不能弄混，因为要等赋值完后再加入</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            _moveLeft = <span class="keyword">new</span> MoveLeft(_playerCube);</span><br><span class="line">            _moveLeft.Execute();</span><br><span class="line">            CommandManager.Instance.AddCommands(_moveLeft);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.B))</span><br><span class="line">        &#123;</span><br><span class="line">            StartCoroutine(CommandManager.Instance.UndoStart());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>一般使用有限状态机实现</p>
<ul>
<li>将对象的行为抽象成几个独立的状态</li>
<li>某一时刻只能处于其中一种状态</li>
<li>通过管理控制状态的互相切换</li>
</ul>
<p>有两张使用场景：场景切换、怪物AI</p>
<p>核心代码（状态机）：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MY_FSM</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> StateType</span><br><span class="line">    &#123;</span><br><span class="line">        Idle,</span><br><span class="line">        MOVE,</span><br><span class="line">        Find_Enemy,</span><br><span class="line">        Attack,</span><br><span class="line">        Die,</span><br><span class="line">        Success,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 接口，AI的状态需要接收这个接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IState</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnEnter</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnExit</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnUpdate</span>()</span>;</span><br><span class="line">        <span class="comment">// void OnCheck();</span></span><br><span class="line">        <span class="comment">// void OnFixUpdate();</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blackboard</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 此处存储共享数据，或者向外展示的数据，可配置的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FSM</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> IState curState;</span><br><span class="line">        <span class="keyword">public</span> Dictionary&lt;StateType, IState&gt; states;</span><br><span class="line">        <span class="keyword">public</span> Blackboard blackboard;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FSM</span>(<span class="params">Blackboard blackboard</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.states = <span class="keyword">new</span> Dictionary&lt;StateType, IState&gt;();</span><br><span class="line">            <span class="keyword">this</span>.blackboard = blackboard;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddState</span>(<span class="params">StateType stateType, IState state</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (states.ContainsKey(stateType))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;[AddState] &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; map has contain key: &quot;</span> + stateType);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            states.Add(stateType, state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SwitchState</span>(<span class="params">StateType stateType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!states.ContainsKey(stateType))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;[SwitchState] &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; not contain key: &quot;</span> + stateType);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curState != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                curState.OnExit();</span><br><span class="line">            &#125;</span><br><span class="line">            curState = states[stateType];</span><br><span class="line">            curState.OnEnter();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnUpdate</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            curState.OnUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnFixUpdate</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// curState.OnFixUpdate();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCheck</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// curState.OnCheck();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Unity</tag>
        <tag>CSharp</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【Unity】销毁子物体的两种方法</title>
    <url>/2023/09/13/unity-%E9%94%80%E6%AF%81%E5%AD%90%E7%89%A9%E4%BD%93%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="销毁所有子物体后，获取子物体的数量为0"><a href="#销毁所有子物体后，获取子物体的数量为0" class="headerlink" title="销毁所有子物体后，获取子物体的数量为0"></a>销毁所有子物体后，获取子物体的数量为0</h3><p>如果在同一帧内需要增加子物体并统计新的子物体的数量可以使用这个方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; coneten.childCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">    DestroyImmediate(content.GetChild(<span class="number">0</span>).gameObject);</span><br><span class="line">	Debug.Log(content.childCount);		<span class="meta"># 输出的值会慢慢的变小，直至变为0</span></span><br><span class="line">&#125;</span><br><span class="line">Debug.Log(content.childCount);		<span class="meta"># 输出为0</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里的<code>for</code>循环获取子物体的方法是<code>GetChild(o)</code></p>
<h3 id="销毁所有子物体后，获取子物体的数量为销毁前的数量"><a href="#销毁所有子物体后，获取子物体的数量为销毁前的数量" class="headerlink" title="销毁所有子物体后，获取子物体的数量为销毁前的数量"></a>销毁所有子物体后，获取子物体的数量为销毁前的数量</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; content.childCount; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Destroy(content.GetChild(i).gameObject);</span><br><span class="line">	Debug.Log(content.childCount);		<span class="meta"># 输出的一直是销毁前的子物体数量</span></span><br><span class="line">&#125;</span><br><span class="line">Debug.Log(content.childCount);		<span class="meta"># 输出的是销毁前的子物体数量</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (RectTransform item <span class="keyword">in</span> content)</span><br><span class="line">&#123;</span><br><span class="line">    Destroy(item.gameObject);</span><br><span class="line">    Debug.Log(content.childCount);		<span class="meta"># 输出的一直是销毁前的子物体数量</span></span><br><span class="line">&#125;</span><br><span class="line">Debug.Log(content.childCount);		<span class="meta"># 输出的是销毁前的子物体数量</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里的<code>for</code>循环中获取子物体的方法是<code>GetChild(i)</code>，这种<code>for</code>循环方式和<code>forecho</code>是一样的</p>
<h3 id="销毁子物体错误的方法"><a href="#销毁子物体错误的方法" class="headerlink" title="销毁子物体错误的方法"></a>销毁子物体错误的方法</h3><p>这种方法销毁不干净子物体</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (RectTransform item <span class="keyword">in</span> content)</span><br><span class="line">&#123;</span><br><span class="line">    DestoryImmediate(item.gameObject);</span><br><span class="line">&#125;</span><br><span class="line">Debug.Log(content.childCount);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】【魔法方法】【装饰器】【上下文管理器】contextlib模块</title>
    <url>/2023/08/12/python-contextlib%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p> 装饰器可以灵活的控制两个函数的执行顺序</p>
<h4 id="无返回值"><a href="#无返回值" class="headerlink" title="无返回值"></a>无返回值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    func()</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@sum</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">take</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="有返回值"><a href="#有返回值" class="headerlink" title="有返回值"></a>有返回值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;outer&quot;</span>)            <span class="comment"># ----------1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">x, y</span>):        <span class="comment"># ----------3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;wrapper&quot;</span>)      <span class="comment"># ----------4</span></span><br><span class="line">        res = func(x, y)      <span class="comment"># ----------5</span></span><br><span class="line">        <span class="keyword">return</span> res            <span class="comment"># ----------9</span></span><br><span class="line">    <span class="keyword">return</span> wrapper            <span class="comment"># ----------2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">x, y</span>):              <span class="comment"># ----------6</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>)            <span class="comment"># ----------7</span></span><br><span class="line">    <span class="keyword">return</span> x+y                <span class="comment"># ----------8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(inner(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">outer</span><br><span class="line">wrapper</span><br><span class="line">inner</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h3><p>在 Python 中，上下文管理器常常与 <code>with</code> 语句一起使用。<code>with</code> 语句会在代码块进入时调用上下文管理器的 <code>__enter__()</code> 方法，而在代码块退出时会调用上下文管理器的 <code>__exit__()</code> 方法。这种机制确保了资源在适当的时候被初始化和清理。</p>
<p>最基础的上下管理器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.read()</span><br></pre></td></tr></table></figure>

<p>自己定义一个上下文管理器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyContext</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Entering the context&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        exc_type: 异常类型，如果没有异常则为None</span></span><br><span class="line"><span class="string">        exc_value: 异常值，如果没有异常则为None</span></span><br><span class="line"><span class="string">        traceback: 追溯信息，如果没有异常则为None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Exiting the context&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> exc_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;An exception of type <span class="subst">&#123;exc_type&#125;</span> occurred with value <span class="subst">&#123;exc_value&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># Return True if you want to suppress the exception</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用with语句创建上下文管理器</span></span><br><span class="line"><span class="keyword">with</span> MyContext() <span class="keyword">as</span> context:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside the context&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Outside the context&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Entering the context</span><br><span class="line">Inside the context</span><br><span class="line">Exiting the context</span><br><span class="line">Outside the context</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="contextlib模块"><a href="#contextlib模块" class="headerlink" title="contextlib模块"></a>contextlib模块</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p>上面我们自定义上下文管理器确实很方便，但是Python标准库还提供了更加易用的上下文管理器工具模块contextlib，它是通过生成器实现的，我们不需要再创建类以及<code>__enter__</code>和<code>__exit__</code>这两个特俗的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_open_context</span>(<span class="params">filename, mode</span>):</span><br><span class="line">    fp = <span class="built_in">open</span>(filename, mode)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> fp</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> make_open_context(<span class="string">&#x27;/tmp/a.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    file_obj.write(<span class="string">&quot;hello carson666&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在上文中，<code>yield</code>关键词把上下文分割成两部分：</p>
<ul>
<li><code>yiled</code>之前就是<code>__enter__</code>中的代码块</li>
<li><code>yield</code>之后就是<code>__exit__</code>中的代码块</li>
</ul>
<p><code>yeild</code>生成的值会绑定到<code>with</code>语句的<code>as</code>子句中的变量。例如上面的例子中<code>yield</code>生成的值是文件句柄对象fp，在下面的with语句中，会将<code>fp</code>和<code>file_obj</code>绑定到一起，也就是说<code>file_obj</code>此时就是一个文件句柄对象，那么它就可以操作文件了，因此就可以调用<code>file_obj.write(&quot;hello world&quot;)</code></p>
<p>另外要注意的是，如果<code>yield</code>没有生成值，那么在<code>with</code>语句中就不需要写<code>as</code>子句了</p>
<h4 id="将普通的类变为上下文管理器类"><a href="#将普通的类变为上下文管理器类" class="headerlink" title="将普通的类变为上下文管理器类"></a>将普通的类变为上下文管理器类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyResource</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;query data&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_myresource</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;connect to resource&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> MyResource()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;connect to resource&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> make_myresource() <span class="keyword">as</span> r:</span><br><span class="line">    r.query()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connect to resource</span><br><span class="line">quert data</span><br><span class="line">connect to resource</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>魔法方法</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】文件处理</title>
    <url>/2023/09/13/python-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h3><ul>
<li>序列：通俗来说就是字符串</li>
<li>序列化：将代码中的对象（如：列表、字典等）转换成<strong>字符串</strong>，以便将信息保存在文件中或传输到网络上</li>
<li>反序列化：将字符串转换成代码中的<strong>对象</strong></li>
</ul>
<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>序列化 (Serialization)，是指<strong>把程序中的一个类转化成一个标准化的格式</strong>。标准化的意义是这个格式可以跨程序，跨平台的被使用，而且保持其原有的内容，规范。</p>
<p><code>json.dumps(&lt;对象&gt;)</code>将对象<strong>转换</strong>成字符串，可添加参数<code>indent=4</code>设置字符串的缩进</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">s = json.dumps(dict_)</span><br><span class="line"><span class="built_in">print</span>(s)	<span class="comment"># 输出：&#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>json.dump(&lt;对象&gt;, &lt;file&gt;)</code>将对象<strong>写入</strong>到file文件中，可添加参数<code>indent=4</code>设置字符串的缩进</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_ = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    json.dump(dict_, json_file)</span><br></pre></td></tr></table></figure>

<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p><code>json.loads(&lt;string&gt;)</code>将<strong>string</strong>转换成对象并返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line">dict_ = json.loads(s)</span><br><span class="line"><span class="built_in">print</span>(dict_)	<span class="comment"># 输出：&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>json.load(&lt;file&gt;)</code>将<strong>file文件</strong>中的内容转换成对象并返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    dict_ = json.load(file)</span><br><span class="line">    <span class="built_in">print</span>(dict_)	<span class="comment"># 输出：&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>json.dumps(&lt;对象&gt;)</code>：将对象<strong>转换</strong>成字符串，作用的转换</p>
<p><code>json.dump(&lt;对象&gt;, &lt;file&gt;)</code>：将对象<strong>写入</strong>file文件中，作用是转换并写入</p>
<p><code>json.loads(&lt;string&gt;)</code>：将string转换成对象并返回，<strong>参数是string</strong></p>
<p><code>json.load(&lt;file&gt;)</code>：将file文件中的内容转换成对象并返回，<strong>参数是file</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】【编程思维】Python中的泛型</title>
    <url>/2023/08/12/python-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" href="/../css/font.css">


<h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>作用：限制数据类型的范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">give_me_the_bigger_one</span>(<span class="params">num0: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>], num1: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(num0) != <span class="built_in">type</span>(num1):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;The two number <span class="subst">&#123;num0&#125;</span> and <span class="subst">&#123;num1&#125;</span> must have the same type!&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> num0 &gt; num1:</span><br><span class="line">        <span class="keyword">return</span> num0</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num1</span><br></pre></td></tr></table></figure>

<p><code>a: Union[int, float]</code>表示变量a可以是int，也可以是float<br><font class="moderate"><br>扩展：<br>Any可以表示任意类型，如果写成<code>a: Any</code>那么就相当于没有做任何事，因为如果只写a的话本身就是能代指任意类型</font></p>
<h3 id="TypeVar"><a href="#TypeVar" class="headerlink" title="TypeVar"></a>TypeVar</h3><p>制作模板——自己定义一个类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&quot;T&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">give_me_the_bigger_one</span>(<span class="params">num0: T, num1: T</span>) -&gt; T:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(num0) != <span class="built_in">type</span>(num1):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;The two number <span class="subst">&#123;num0&#125;</span> and <span class="subst">&#123;num1&#125;</span> must have the same type!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num0 &gt; num1:</span><br><span class="line">        <span class="keyword">return</span> num0</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num1</span><br></pre></td></tr></table></figure>

<p><code>T  = TypeVar(&quot;T&quot;)</code>表示定义了一个泛型类型变量T，并没有指定他的类型上限，也就是说传给这个函数的参数可以是任意类型</p>
<p>通常在创建泛型类变量时会使用<code>bound</code>参数指定上限：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义了一个泛型类型变量T_Config，他的类上限是BasePluginConfig</span></span><br><span class="line"><span class="comment"># 意味着T_Config可以被替代为BasePluginConfig类型或BasePluginConfig的子类</span></span><br><span class="line">T_Config = TypeVar(<span class="string">&quot;T_Config&quot;</span>, bound=BasePluginConfig)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePluginConfig</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="Generic"><a href="#Generic" class="headerlink" title="Generic"></a>Generic</h3><p>类似于where，限制传给一个函数的类型范围</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, TypeVar, <span class="type">Generic</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>(<span class="type">Generic</span>[T]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 定义一个元素类型都是T的队列</span></span><br><span class="line">        self.items: <span class="type">List</span>[T] = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item: T</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.items.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>) -&gt; T:</span><br><span class="line">        <span class="keyword">return</span> self.items.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.items)</span><br><span class="line"></span><br><span class="line">q = Queue[<span class="built_in">int</span>]()</span><br><span class="line">q.push(<span class="number">0</span>)</span><br><span class="line">q.push(<span class="number">1</span>)</span><br><span class="line">q.pop()             <span class="comment"># 移除0</span></span><br><span class="line">q.push(<span class="string">&#x27;string&#x27;</span>)    <span class="comment"># 并不会报错</span></span><br><span class="line"><span class="built_in">print</span>(q)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, &#x27;string&#x27;]</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure>

<p>注意最后的<code>q.push(&#39;string&#39;)</code>中<code>&#39;string&#39;</code>虽然并不是int类型，但是在实际运行中并不会报错，不过我们可以通过使用静态类型检查工具（mypy, pytype, pyright, pyre）等方法，提前发现这些错误。这也是推荐使用<code>typing</code>模块来做type annotation的理由之一。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>使用<code>typing</code>模块盒注释来提高代码的可读性</p>
</li>
<li><p>将自动化的类型检查工具和API生成工具部署在CI中，方便提前发现错误，方便新人员的理解</p>
</li>
</ul>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/497801684">Python中的泛型</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>编程思维</tag>
      </tags>
  </entry>
</search>
